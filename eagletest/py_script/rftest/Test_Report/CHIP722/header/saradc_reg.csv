 Address ; RegName ; Clk ; Rst ; Port ; Public ; Signal ; BitPos ; Default ; SW(R/W) ; HW(W) ; MCU(W) ; MISC ; Description ;;;
0x0000; SAR_READER1_CTRL; pclk ; reset_n ;;;; [31:30] ; 2'h0 ; RO ;;;;;;;
;;;;;; reg_sar1_int_en; [29]; 1'b1 ; R/W ;;;;enable saradc1 to send out interrupt;;;
;;;;;; reg_sar1_data_inv ; [28] ; 1'd0 ; R/W ;;;;Invert SAR ADC1 data;;;
;;;;;;; [27];;;;;;; 0: SAR ADC1 controlled by RTC ADC1 CTRL;;
;;;;;N/A; reg_sar1_sample_num ; [26:19] ; 8'd0 ; R/W ;;;;;;;
;;;;;N/A; reg_sar1_clk_gated ; [18] ; 1'b1 ; R/W ;;;;;;;
;;;;;; reg_sar1_sample_bit ; [17:16] ; 2'd3 ; R/W ;;;;00: for 9-bit width; 01: for 10-bit width; 10: for 11-bit width; 11: for 12-bit width
;;;;;; reg_sar1_sample_cycle ; [15:8] ; 8'd9 ; R/W ;;;;sample cycles for SAR ADC1;;;
;;;;;; reg_sar1_clk_div ; [7:0] ; 8'd2 ; R/W ;;;;clock divider;;;
0x0004; SAR_READER1_STATUS; pclk ; reset_n ;;N/A; sar1_reader_status ; [31:0] ; 32'h0 ; RO ;;;;;;;
0x0008; SAR_MEAS1_CTRL1; pclk ; reset_n ;;N/A; reg_amp_short_ref_gnd_force ; [31:30] ; 2'b0 ; R/W ;;;;;;;
;;;;;N/A; reg_amp_short_ref_force ; [29:28]; 2'b0 ; R/W ;;;;;;;
;;;;;N/A; reg_amp_rst_fb_force ; [27:26]; 2'b0 ; R/W ;;;;;;;
;;;;;N/A; reg_force_xpd_amp ; [25:24]; 2'd0 ; R/W ;;;;;;;
;;;;;;; [23:3];;;;;;;;;
;;;;;; reg_sar1_stop ; [2] ; 1'b0 ; R/W ;;;;stop SAR ADC1 conversion;;;
;;;;;; reg_sar1_bit_width ; [1:0] ; 2'b11 ; R/W ;;;;00: 9 bit;;;
0x000c; SAR_MEAS1_CTRL2; pclk ; reset_n ;;; reg_sar1_en_pad_force ; [31] ; 1'b0 ; R/W ;;;;1: SAR ADC1 pad enable bitmap is controlled by SW;;;
;;;;;; reg_sar1_en_pad ; [30:19] ; 12'b0 ; R/W ;;;;SAR ADC1 pad enable bitmap;;;
;;;;;; reg_meas1_start_force ; [18] ; 1'b0 ; R/W ;;;;1: SAR ADC1 controller (in RTC) is started by SW;;;
;;;;;; reg_meas1_start_sar ; [17] ; 1'b0 ; R/W ;;;;SAR ADC1 controller (in RTC) starts conversion;;;
;;;;;; reg_meas1_done_sar ; [16] ; 1'b0 ; RO ;;;;SAR ADC1 conversion done indication;;;
;;;;;; reg_meas1_data_sar ; [15:0] ; 16'b0 ; RO ;;;;SAR ADC1 data;;;
0x0010; SAR_MEAS1_MUX; pclk ; reset_n ;;; reg_sar1_dig_force ; [31] ; 1'd0 ; R/W ;;;;1: SAR ADC1 controlled by DIG ADC1 CTRL;;;
;;;;;;; [30:0];;;;;;;;;
0x0014; SAR_ATTEN1; pclk ; reset_n ;;; reg_sar1_atten ; [31:0] ; 32'hffffffff ; R/W ;;;;2-bit attenuation for each pad;;;
0x0018; SAR_AMP_CTRL1; pclk ; reset_n ;;N/A; reg_sar_amp_wait2 ; [31:16] ; 16'd10 ; R/W ;;;;;;;
;;;;;N/A; reg_sar_amp_wait1 ; [15:0] ; 16'd10 ; R/W ;;;;;;;
0x001c; SAR_AMP_CTRL2; pclk ; reset_n ;;N/A; reg_sar_amp_wait3 ; [31:16] ; 16'd10 ; R/W ;;;;;;;
;;;;;;; [15:7];;;;;;;;;
;;;;;N/A; reg_sar_rstb_fsm_idle ; [6] ; 1'b0 ; R/W ;;;;;;;
;;;;;N/A; reg_xpd_sar_fsm_idle ; [5] ; 1'b0 ; R/W ;;;;;;;
;;;;;N/A; reg_amp_short_ref_gnd_fsm_idle ; [4] ; 1'b0 ; R/W ;;;;;;;
;;;;;N/A; reg_amp_short_ref_fsm_idle ; [3] ; 1'b0 ; R/W ;;;;;;;
;;;;;N/A; reg_amp_rst_fb_fsm_idle ; [2] ; 1'b0 ; R/W ;;;;;;;
;;;;;N/A; reg_xpd_sar_amp_fsm_idle ; [1] ; 1'b0 ; R/W ;;;;;;;
;;;;;N/A; reg_sar1_dac_xpd_fsm_idle ; [0] ; 1'b0 ; R/W ;;;;;;;
0x0020; SAR_AMP_CTRL3; pclk ; reset_n ;;;; [31:28] ;;;;;;;;;
;;;;;N/A; reg_sar_rstb_fsm ; [27:24]; 4'b0000 ; R/W ;;;;;;;
;;;;;N/A; reg_xpd_sar_fsm ; [23:20] ; 4'b0111 ; R/W ;;;;;;;
;;;;;N/A; reg_amp_short_ref_gnd_fsm ; [19:16] ; 4'b0011 ; R/W ;;;;;;;
;;;;;N/A; reg_amp_short_ref_fsm ; [15:12] ; 4'b0011 ; R/W ;;;;;;;
;;;;;N/A; reg_amp_rst_fb_fsm ; [11:8] ; 4'b1000 ; R/W ;;;;;;;
;;;;;N/A; reg_xpd_sar_amp_fsm ; [7:4] ; 4'b1111 ; R/W ;;;;;;;
;;;;;N/A; reg_sar1_dac_xpd_fsm ; [3:0] ; 4'b0011 ; R/W ;;;;;;;
0x0024; SAR_READER2_CTRL; pclk ; reset_n ;;;; [31] ; 1'h0 ; RO ;;;;;;;
;;;;;; reg_sar2_int_en; [30] ; 1'b1 ; R/W ;;;;enable saradc2 to send out interrupt;;;
;;;;;; reg_sar2_data_inv ; [29] ; 1'b0 ; R/W ;;;;Invert SAR ADC2 data;;;
;;;;;;; [28:27];;;;;;;;;
;;;;;N/A; reg_sar2_sample_num ; [26:19] ; 8'd0 ; R/W ;;;;;;;
;;;;;N/A; reg_sar2_clk_gated ; [18] ; 1'b1 ; R/W ;;;;;;;
;;;;;; reg_sar2_sample_bit ; [17:16] ; 2'd3 ; R/W ;;;;00: for 9-bit width;;;
;;;;;; reg_sar2_sample_cycle ; [15:8] ; 8'd9 ; R/W ;;;;sample cycles for SAR ADC2;;;
;;;;;; reg_sar2_clk_div ; [7:0] ; 8'd2 ; R/W ;;;;clock divider;;;
0x0028; SAR_READER2_STATUS; pclk ; reset_n ;;N/A; sar2_reader_status ; [31:0] ; 32'h0 ; RO ;;;;;;;
0x002c; SAR_MEAS2_CTRL1; pclk ; reset_n ;;N/A; reg_sar2_xpd_wait; [31:24] ; 8'h7 ; R/W ;;;;;;;
;;;;;N/A; reg_sar2_rstb_wait ; [23:16] ; 8'd2 ; R/W ;;;;;;;
;;;;;N/A; reg_sar2_standby_wait ; [15:8] ; 8'd2 ; R/W ;;;;;;;
;;;;;N/A; reg_sar2_rstb_force ; [7:6]; 2'b0 ; R/W ;;;;;;;
;;;;;; reg_sar2_en_test ; [5]; 1'b0 ; R/W ;;;;SAR2_EN_TEST;;;
;;;;;; reg_sar2_pkdet_cal_en; [4] ; 1'b0 ; R/W ;;;;rtc control pkdet enable;;;
;;;;;; reg_sar2_pwdet_cal_en; [3] ; 1'b0 ; R/W ;;;;rtc control pwdet enable;;;
;;;;;; reg_sar2_stop ; [2] ; 1'b0 ; R/W ;;;;stop SAR ADC2 conversion;;;
;;;;;; reg_sar2_bit_width ; [1:0] ; 2'b11 ; R/W ;;;;00: 9 bit;;;
0x0030; SAR_MEAS2_CTRL2; pclk ; reset_n ;;; reg_sar2_en_pad_force ; [31] ; 1'b0 ; R/W ;;;;1: SAR ADC2 pad enable bitmap is controlled by SW;;;
;;;;;; reg_sar2_en_pad ; [30:19] ; 12'b0 ; R/W ;;;;SAR ADC2 pad enable bitmap;;;
;;;;;; reg_meas2_start_force ; [18] ; 1'b0 ; R/W ;;;;1: SAR ADC2 controller (in RTC) is started by SW;;;
;;;;;; reg_meas2_start_sar ; [17] ; 1'b0 ; R/W ;;;;SAR ADC2 controller (in RTC) starts conversion;;;
;;;;;; reg_meas2_done_sar ; [16] ; 1'b0 ; RO ;;;;SAR ADC2 conversion done indication;;;
;;;;;; reg_meas2_data_sar ; [15:0] ; 16'b0 ; RO ;;;;SAR ADC2 data;;;
0x0034; SAR_MEAS2_MUX; pclk ; reset_n ;;; reg_sar2_rtc_force; [31] ; 1'b0 ; R/W ;;;;in sleep, force to use rtc to control ADC;;;
;;;;;; reg_sar2_pwdet_cct ; [30:28] ; 3'b0 ; R/W ;;;;SAR2_PWDET_CCT;;;
;;;;;;; [27:0];;;;;;;;;
0x0038; SAR_ATTEN2; pclk ; reset_n ;;; reg_sar2_atten ; [31:0] ; 32'hffffffff ; R/W ;;;;2-bit attenuation for each pad;;;
0x003c; SAR_POWER_XPD_SAR; pclk ; reset_n ; Not ;N/A; reg_sarclk_en ; [31] ; 1'b0 ; R/W ;;;;;;;
;;;;;N/A; reg_force_xpd_sar ; [30:29] ; 2'd0 ; R/W ;;;;;;;
;;;;;; reg_sar1_dref; [28:26]; 3'd0; R/W ;;;;Adjust saradc1 offset;;;
;;;;;; reg_sar2_dref; [25:23]; 3'd0; R/W ;;;;Adjust saradc2 offset;;;
;;;;;;; [22:0];;;;;;;;;
0x0040; SAR_SLAVE_ADDR1; pclk ; reset_n ;;;; [31:30] ; 2'h0 ; RO ;;;;;;;
;;;;;N/A; saradc_meas_status ; [29:22] ; 8'h0 ; RO ;;;;;;;
;;;;;; reg_i2c_slave_addr0 ; [21:11] ; 11'h0 ; R/W ;;;;;;;
;;;;;; reg_i2c_slave_addr1 ; [10:0] ; 11'h0 ; R/W ;;;;;;;
0x0044; SAR_SLAVE_ADDR2; pclk ; reset_n ;;;; [31:22] ; 10'h0 ; RO ;;;;;;;
;;;;;; reg_i2c_slave_addr2 ; [21:11] ; 11'h0 ; R/W ;;;;;;;
;;;;;; reg_i2c_slave_addr3 ; [10:0] ; 11'h0 ; R/W ;;;;;;;
0x0048; SAR_SLAVE_ADDR3; pclk ; reset_n ;;;; [31:22] ; 1'h0 ; RO ;;;;;;;
;;;;;; reg_i2c_slave_addr4 ; [21:11] ; 11'h0 ; R/W ;;;;;;;
;;;;;; reg_i2c_slave_addr5 ; [10:0] ; 11'h0 ; R/W ;;;;;;;
0x004c; SAR_SLAVE_ADDR4; pclk ; reset_n ;;;; [31:22] ; 10'h0 ; RO ;;;;;;;
;;;;;; reg_i2c_slave_addr6 ; [21:11] ; 11'h0 ; R/W ;;;;;;;
;;;;;; reg_i2c_slave_addr7 ; [10:0] ; 11'h0 ; R/W ;;;;;;;
0x0050; SAR_TSENS_CTRL; pclk ; reset_n ;;; reg_tsens_dac; [31:28] ; 4'hF; R/W ;;;;Temperature sensor offset dac. 15 for 0 offset, 5 for -2, 7 for -1, 11 for 1, 10 for 2;;;
;;;;;; reg_tsens_div_chop; [27:26]; 2'b10; R/W ;;;;0 for steady phase 0, 1 for steady phase 1, 2 for chopping with ½ frequency of TSENS_CK, 3 for chopping with ¼;;;
;;;;;; reg_tsens_diz; [25] ; 1'b0; R/W ;;;;ADC input short;;;
;;;;;; reg_tsens_dump_out ; [24] ; 1'b0 ; R/W ;;;;temperature sensor dump out; only active when reg_tsens_power_up_force = 1;;
;;;;;; reg_tsens_power_up_force ; [23] ; 1'b0 ; R/W ;;;;1: dump out & power up controlled by SW; 0: by FSM;;
;;;;;; reg_tsens_power_up ; [22] ; 1'b0 ; R/W ;;;;temperature sensor power up;;;
;;;;;; reg_tsens_clk_div ; [21:14] ; 8'd6 ; R/W ;;;;temperature sensor clock divider;;;
;;;;;; reg_tsens_in_inv ; [13] ; 1'b0 ; R/W ;;;;invert temperature sensor data;;;
;;;;;; reg_tsens_int_en; [12] ; 1'b1 ; R/W ;;;;enable temperature sensor to send out interrupt;;;
;;;;;;; [11:9];;;;;;;;;
;;;;;; reg_tsens_ready; [8] ; 1'h0 ; RO ;;;;indicate temperature sensor out ready;;;
;;;;;; reg_tsens_out ; [7:0] ; 8'h0 ; RO ;;;;temperature sensor data out;;;
0x0054; SAR_TSENS_CTRL2; pclk ; reset_n ;;;; [31:17] ;;;;;;;;;
;;;;;; reg_tsens_reset; [16] ; 1'b0; R/W ;;;;temperature sensor reset;;;
;;;;;; reg_tsens_clkgate_en; [15] ; 1'b0 ; R/W ;;;;temperature sensor clock enable;;;
;;;;;N/A; reg_tsens_clk_inv ; [14] ; 1'b1 ; R/W ;;;;;;;
;;;;;N/A; reg_tsens_xpd_force; [13:12] ; 2'b0 ; R/W ;;;;;;;
;;;;;N/A; reg_tsens_xpd_wait ; [11:0] ; 12'h2 ; R/W ;;;;;;;
0x0058; SAR_I2C_CTRL; pclk ; reset_n ;;;; [31:30] ;;;;;;;;;
;;;;;; reg_sar_i2c_start_force ; [29] ; 1'b0 ; R/W ;;;;1: I2C started by SW; 0: I2C started by FSM;;
;;;;;; reg_sar_i2c_start ; [28] ; 1'b0 ; R/W ;;;;start I2C; only active when reg_sar_i2c_start_force = 1;;
;;;;;; reg_sar_i2c_ctrl ; [27:0] ; 28'b0 ; R/W ;;;;I2C control data; only active when reg_sar_i2c_start_force = 1;;
0x005c; SAR_TOUCH_CONF; pclk ; reset_n ;;; reg_touch_approach_pad0; [31:28] ; 4'hF; R/W ;;;;indicate which pad is approach pad0;;;
;;;;;; reg_touch_approach_pad1; [27:24] ; 4'hF; R/W ;;;;indicate which pad is approach pad1;;;
;;;;;; reg_touch_approach_pad2; [23:20] ; 4'hF; R/W ;;;;indicate which pad is approach pad2;;;
;;;;;;; [19:16];;;;;;;;;
;;;;;; reg_touch_status_clr; [15] ; 1'd0; WO;;;;clear all touch active status;;;
;;;;;; reg_touch_outen; [14:0]; 15'h7FFF; R/W ;;;;touch controller output enable;;;
0x0060; SAR_TOUCH_THRES1; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th1; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 1;;;
0x0064; SAR_TOUCH_THRES2; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th2; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 2;;;
0x0068; SAR_TOUCH_THRES3; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th3; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 3;;;
0x006c; SAR_TOUCH_THRES4; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th4; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 4;;;
0x0070; SAR_TOUCH_THRES5; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th5; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 5;;;
0x0074; SAR_TOUCH_THRES6; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th6; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 6;;;
0x0078; SAR_TOUCH_THRES7; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th7; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 7;;;
0x007c; SAR_TOUCH_THRES8; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th8; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 8;;;
0x0080; SAR_TOUCH_THRES9; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th9; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 9;;;
0x0084; SAR_TOUCH_THRES10; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th10; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 10;;;
0x0088; SAR_TOUCH_THRES11; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th11; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 11;;;
0x008c; SAR_TOUCH_THRES12; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th12; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 12;;;
0x0090; SAR_TOUCH_THRES13; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th13; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 13;;;
0x0094; SAR_TOUCH_THRES14; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_out_th14; [21:0] ; 22'h0 ; R/W ;;;;Finger threshold for touch pad 14;;;
0x0098; SAR_TOUCH_OUT0; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out0; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 0;;;
0x009c; SAR_TOUCH_OUT1; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out1; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 1;;;
0x00a0; SAR_TOUCH_OUT2; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out2 ; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 2;;;
0x00a4; SAR_TOUCH_OUT3; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out3 ; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 3;;;
0x00a8; SAR_TOUCH_OUT4; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out4 ; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 4;;;
0x00ac; SAR_TOUCH_OUT5; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out5 ; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 5;;;
0x00b0; SAR_TOUCH_OUT6; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out6 ; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 6;;;
0x00b4; SAR_TOUCH_OUT7; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out7 ; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 7;;;
0x00b8; SAR_TOUCH_OUT8; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out8 ; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 8;;;
0x00bc; SAR_TOUCH_OUT9; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out9 ; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 9;;;
0x00c0; SAR_TOUCH_OUT10; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out10; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 10;;;
0x00c4; SAR_TOUCH_OUT11; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out11; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 11;;;
0x00c8; SAR_TOUCH_OUT12; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out12; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 12;;;
0x00cc; SAR_TOUCH_OUT13; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out13; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 13;;;
0x00d0; SAR_TOUCH_OUT14; pclk ; reset_n ;;;; [31:22] ;;;;;;;;;
;;;;;; reg_touch_meas_out14; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 14;;;
0x00d4; SAR_TOUCH_CHN_ST; pclk ; reset_n ;;; touch_meas_done; [31]; 1'b0; RO ;;;;;;;
;;;;;;; [30];;;;;;;;;
;;;;;; reg_touch_channel_clr; [29:15]; 15'd0; WO;;;;Clear touch channel;;;
;;;;;; touch_pad_active; [14:0]; 15'd0; RO ;;;;touch active status;;;
0x00d8; SAR_TOUCH_STATUS0; pclk ; reset_n ;;;; [31:26] ;;;;;;;;;
;;;;;; touch_scan_curr; [25:22]; 4'd0; RO ;;;;;;;
;;;;;; touch_denoise_data; [21:0] ; 22'h0 ; RO ;;;;the counter for touch pad 0;;;
0x00dc; SAR_TOUCH_STATUS1; pclk ; reset_n ;;; touch_pad1_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad1_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x00e0; SAR_TOUCH_STATUS2; pclk ; reset_n ;;; touch_pad2_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad2_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x00e4; SAR_TOUCH_STATUS3; pclk ; reset_n ;;; touch_pad3_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad3_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x00e8; SAR_TOUCH_STATUS4; pclk ; reset_n ;;; touch_pad4_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad4_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x00ec; SAR_TOUCH_STATUS5; pclk ; reset_n ;;; touch_pad5_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad5_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x00f0; SAR_TOUCH_STATUS6; pclk ; reset_n ;;; touch_pad6_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad6_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x00f4; SAR_TOUCH_STATUS7; pclk ; reset_n ;;; touch_pad7_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad7_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x00f8; SAR_TOUCH_STATUS8; pclk ; reset_n ;;; touch_pad8_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad8_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x00fc; SAR_TOUCH_STATUS9; pclk ; reset_n ;;; touch_pad9_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad9_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x0100; SAR_TOUCH_STATUS10; pclk ; reset_n ;;; touch_pad10_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad10_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x0104; SAR_TOUCH_STATUS11; pclk ; reset_n ;;; touch_pad11_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad11_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x0108; SAR_TOUCH_STATUS12; pclk ; reset_n ;;; touch_pad12_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad12_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x010c; SAR_TOUCH_STATUS13; pclk ; reset_n ;;; touch_pad13_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad13_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x0110; SAR_TOUCH_STATUS14; pclk ; reset_n ;;; touch_pad14_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_pad14_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x0114; SAR_TOUCH_STATUS15; pclk ; reset_n ;;; touch_slp_debounce; [31:29] ; 3'd0; RO ;;;;;;;
;;;;;;; [28:22];;;;;;;;;
;;;;;; touch_slp_baseline; [21:0]; 22'h0 ; RO ;;;;;;;
0x0118; SAR_TOUCH_STATUS16; pclk ; reset_n ;;; touch_slp_approach_cnt; [31:24] ; 8'd0 ; RO ;;;;;;;
;;;;;; touch_approach_pad0_cnt; [23:16]; 8'd0 ; RO ;;;;;;;
;;;;;; touch_approach_pad1_cnt; [15:8]; 8'd0 ; RO ;;;;;;;
;;;;;; touch_approach_pad2_cnt; [7:0] ; 8'd0 ; RO ;;;;;;;
0x011c; SAR_DAC_CTRL1; pclk ; reset_n ;;;; [31:26] ; 6'b0 ; RO ;;;;;;;
;;;;;; reg_dac_clk_inv ; [25] ; 1'b0 ; R/W ;;;;1: invert PDAC_CLK;;;
;;;;;; reg_dac_clk_force_high ; [24] ; 1'b0 ; R/W ;;;;1: force PDAC_CLK to high;;;
;;;;;; reg_dac_clk_force_low ; [23] ; 1'b0 ; R/W ;;;;1: force PDAC_CLK to low;;;
;;;;;; reg_dac_dig_force ; [22] ; 1'b0 ; R/W ;;;;1: DAC1 & DAC2 use DMA; 0: DAC1 & DAC2 do not use DMA;;
;;;;;N/A; reg_debug_bit_sel ; [21:17] ; 5'b0 ; R/W ;;;;;;;
;;;;;; reg_sw_tone_en ; [16] ; 1'b0 ; R/W ;;;;1: enable CW generator; 0: disable CW generator;;
;;;;;; reg_sw_fstep ; [15:0] ; 16'b0 ; R/W ;;;;frequency step for CW generator; can be used to adjust the frequency;;
0x0120; SAR_DAC_CTRL2; pclk ; reset_n ;;;; [31:26] ; 6'b0 ; RO ;;;;;;;
;;;;;; reg_dac_cw_en2 ; [25] ; 1'b1 ; R/W ;;;;1: to select CW generator as source to PDAC2_DAC[7:0]; 0: to select register reg_pdac2_dac[7:0] as source to PDAC2_DAC[7:0] ;;
;;;;;; reg_dac_cw_en1 ; [24] ; 1'b1 ; R/W ;;;;1: to select CW generator as source to PDAC1_DAC[7:0]; 0: to select register reg_pdac1_dac[7:0] as source to PDAC1_DAC[7:0] ;;
;;;;;; reg_dac_inv2 ; [23:22] ; 2'b0 ; R/W ;;;;00: do not invert any bits; 01: invert all bits; 10: invert MSB; 11: invert all bits except MSB
;;;;;; reg_dac_inv1 ; [21:20] ; 2'b0 ; R/W ;;;;00: do not invert any bits; 01: invert all bits; 10: invert MSB; 11: invert all bits except MSB
;;;;;; reg_dac_scale2 ; [19:18] ; 2'b0 ; R/W ;;;;00: no scale; 01: scale to 1/2; 10: scale to 1/4; scale to 1/8
;;;;;; reg_dac_scale1 ; [17:16] ; 2'b0 ; R/W ;;;;00: no scale; 01: scale to 1/2; 10: scale to 1/4; scale to 1/8
;;;;;; reg_dac_dc2 ; [15:8] ; 8'b0 ; R/W ;;;;DC offset for DAC2 CW generator;;;
;;;;;; reg_dac_dc1 ; [7:0] ; 8'b0 ; R/W ;;;;DC offset for DAC1 CW generator;;;
0x0124; SAR_COCPU_STATE; pclk;reset_n;;;;[31];1'b0;RO;;;;;;;
;;;;;N/A;reg_cocpu_ebreak;[30];1'b0;RO;;;;check cocpu whether in ebreak;;;
;;;;;N/A;reg_cocpu_trap;[29];1'b0;RO;;;;check cocpu whether in trap state;;;
;;;;;N/A;reg_cocpu_eoi;[28];1'b0;RO;;;;check cocpu whether in interrupt state;;;
;;;;;N/A;reg_cocpu_reset_n;[27];1'b0;RO;;;;check cocpu whether in reset state;;;
;;;;;N/A;reg_cocpu_clk_en;[26];1'b0;RO;;;;check cocpu whether clk on;;;
;;;;;N/A;reg_cocpu_dbg_trigger;[25];1'b0;WO;;;;trigger cocpu debug registers;;;
;;;;;;;[24:0];;;;;;;;;
0x0128; SAR_COCPU_INT_RAW; pclk; reset_n ;;;;[31:9];;;;;;;;;
;;;; Not ;;reg_cocpu_swd_int_raw;[8];1'b0;RO;rtc_swd_int/1'd1;reg_cocpu_swd_int_clr/1'd0;;int from super watch dog;;;
;;;; Not ;;reg_cocpu_sw_int_raw;[7];1'b0;RO;cocpu_sw_int/1'd1;reg_cocpu_sw_int_clr/1'd0;;int from software;;;
;;;; Not ;;reg_cocpu_start_int_raw;[6];1'b0;RO;cocpu_start_int/1'd1;reg_cocpu_start_int_clr/1'd0;;int from start;;;
;;;; Not ;;reg_cocpu_tsens_int_raw;[5];1'b0;RO;rtc_tsens_done_int/1'd1;reg_cocpu_tsens_int_clr/1'd0;;int from tsens;;;
;;;; Not ;;reg_cocpu_saradc2_int_raw;[4];1'b0;RO;rtc_saradc2_done_int/1'd1;reg_cocpu_saradc2_int_clr/1'd0;;int from saradc2;;;
;;;; Not ;;reg_cocpu_saradc1_int_raw;[3];1'b0;RO;rtc_saradc1_done_int/1'd1;reg_cocpu_saradc1_int_clr/1'd0;;int from saradc1;;;
;;;; Not ;;reg_cocpu_touch_active_int_raw;[2];1'b0;RO;rtc_touch_active_int/1'd1;reg_cocpu_touch_active_int_clr/1'd0;;int from touch active;;;
;;;; Not ;;reg_cocpu_touch_inactive_int_raw;[1];1'b0;RO;rtc_touch_inactive_int/1'd1;reg_cocpu_touch_inactive_int_clr/1'd0;;int from touch inactive;;;
;;;; Not ;;reg_cocpu_touch_done_int_raw;[0];1'b0;RO;rtc_touch_done_int/1'd1;reg_cocpu_touch_done_int_clr/1'd0;;int from touch done;;;
0x012c; SAR_COCPU_INT_ENA; pclk; reset_n ;;;;[31:9];;;;;;;;;
;;;; Not ;;reg_cocpu_swd_int_ena;[8];1'b0;R/W ;;;;;;;
;;;; Not ;;reg_cocpu_sw_int_ena;[7];1'b0;R/W ;;;;cocpu int enable;;;
;;;; Not ;;reg_cocpu_start_int_ena;[6];1'b0;R/W ;;;;;;;
;;;; Not ;;reg_cocpu_tsens_int_ena;[5];1'b0;R/W ;;;;;;;
;;;; Not ;;reg_cocpu_saradc2_int_ena;[4];1'b0;R/W ;;;;;;;
;;;; Not ;;reg_cocpu_saradc1_int_ena;[3];1'b0;R/W ;;;;;;;
;;;; Not ;;reg_cocpu_touch_active_int_ena;[2];1'b0;R/W ;;;;;;;
;;;; Not ;;reg_cocpu_touch_inactive_int_ena;[1];1'b0;R/W ;;;;;;;
;;;; Not ;;reg_cocpu_touch_done_int_ena;[0];1'b0;R/W ;;;;;;;
0x0130; SAR_COCPU_INT_ST; pclk; reset_n ;;;;[31:9];;;;;INT_ST;;;;
;;;; Not ;;reg_cocpu_swd_int_st;[8];1'b0;RO;;;;;;;
;;;; Not ;;reg_cocpu_sw_int_st;[7];1'b0;RO;;;;cocpu int status;;;
;;;; Not ;;reg_cocpu_start_int_st;[6];1'b0;RO;;;;;;;
;;;; Not ;;reg_cocpu_tsens_int_st;[5];1'b0;RO;;;;;;;
;;;; Not ;;reg_cocpu_saradc2_int_st;[4];1'b0;RO;;;;;;;
;;;; Not ;;reg_cocpu_saradc1_int_st;[3];1'b0;RO;;;;;;;
;;;; Not ;;reg_cocpu_touch_active_int_st;[2];1'b0;RO;;;;;;;
;;;; Not ;;reg_cocpu_touch_inactive_int_st;[1];1'b0;RO;;;;;;;
;;;; Not ;;reg_cocpu_touch_done_int_st;[0];1'b0;RO;;;;;;;
0x0134; SAR_COCPU_INT_CLR; pclk; reset_n ;;;;[31:9];;;;;;;;;
;;;; Not ;;reg_cocpu_swd_int_clr;[8];1'b0;WO;;;;;;;
;;;; Not ;;reg_cocpu_sw_int_clr;[7];1'b0;WO;;;;cocpu int clear;;;
;;;; Not ;;reg_cocpu_start_int_clr;[6];1'b0;WO;;;;;;;
;;;; Not ;;reg_cocpu_tsens_int_clr;[5];1'b0;WO;;;;;;;
;;;; Not ;;reg_cocpu_saradc2_int_clr;[4];1'b0;WO;;;;;;;
;;;; Not ;;reg_cocpu_saradc1_int_clr;[3];1'b0;WO;;;;;;;
;;;; Not ;;reg_cocpu_touch_active_int_clr;[2];1'b0;WO;;;;;;;
;;;; Not ;;reg_cocpu_touch_inactive_int_clr;[1];1'b0;WO;;;;;;;
;;;; Not ;;reg_cocpu_touch_done_int_clr;[0];1'b0;WO;;;;;;;
0x0138; SAR_COCPU_DEBUG; pclk ; reset_n ;;N/A;reg_cocpu_mem_addr;[31:19];13'd0; RO;;;;cocpu mem address output;;;
;;;;;N/A;reg_cocpu_mem_wen;[18:15];4'd0; RO;;;;cocpu mem write enable output;;;
;;;;;N/A;reg_cocpu_mem_rdy;[14];1'b0; RO;;;;cocpu mem ready input;;;
;;;;;N/A;reg_cocpu_mem_vld;[13];1'b0; RO;;;;cocpu mem valid output;;;
;;;;;N/A;reg_cocpu_pc;[12:0];13'd0; RO;;;;cocpu Program counter;;;
0x013c; SAR_HALL_CTRL; pclk ; reset_n ;;; reg_hall_phase_force ; [31] ; 1'b1 ; R/W ;;;;1: HALL PHASE is controlled by SW  0: HALL PHASE is controlled by FSM in ULP-coprocessor;;;
;;;;;; reg_hall_phase; [30] ; 1'b0 ; R/W ;;;;Reverse phase of hall sensor;;;
;;;;;; reg_xpd_hall_force ; [29]; 1'b1;R/W;;;;1: XPD HALL is controlled by SW. 0: XPD HALL is controlled by FSM in ULP-coprocessor;;;
;;;;;; reg_xpd_hall; [28]; 1'b0 ;R/W;;;;Power on hall sensor and connect to VP and VN;;;
;;;;;;; [27:0];;;;;;;;;
0x0140; SAR_NOUSE ; pclk ; reset_n ;;N/A; reg_sar_nouse; [31:0];32'h0;R/W;;;;;;;
0x0144; SARDATE ; pclk ; reset_n ;;;; [31:28] ; 4'h0 ; RO;;;;;;;
;;;;;N/A; reg_sar_date ; [27:0] ; 28'h1809210; R/W ;;;;;;;
