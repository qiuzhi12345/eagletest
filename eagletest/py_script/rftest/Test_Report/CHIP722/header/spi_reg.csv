Address;RegName;Clk;Rst;Port ; Public ; Signal;BitPos;Default;SW(R/W);HW(W);MCU(W);MISC;Description;
0x000;SPI_CMD;clk;reset_n;;N/A;;[31:25];7'd0;RO;;;;;
;;;;;;spi_usr;[24];1'b0;R/W;;;;User define command enable.  An operation will be triggered when the bit is set. The bit will be cleared once the operation done.1: enable 0: disable. Can not be changed by CONF_buf.;
;;;;;;spi_conf_bitlen;[23:0];24'd104;R/W;;;;Define the spi_clk cycles of  SPI_CONF state.;
0x004;SPI_ADDR;clk;reset_n;;;spi_usr_addr_value;[31:0];32'h0;R/W;;;;[31:8]:address to slave, [7:0]:Reserved.;
0x008;SPI_CTRL;clk;reset_n;;;;[31:27];5'h0;RO;;;;reserved;
;;;;;;spi_wr_bit_order;[26];1'b0;R/W;;;;In command address write-data (MOSI) phases 1: LSB firs 0: MSB first;
;;;;;;spi_rd_bit_order;[25];1'b0;R/W;;;;In read-data (MISO) phase 1: LSB first 0: MSB first;
;;;;;;;[24:22];3'd0;RO;;;;reserved;
;;;;;;spi_wp_reg;[21];1'b1;R/W;;;;Write protect signal output when SPI is idle.  1: output high, 0: output low. ;
;;;;;;spi_fread_quad;[20];1'b0;R/W;;;;In the read operations read-data phase apply 4 signals. 1: enable 0: disable. ;
;;;;;;spi_d_pol;[19];1'b1;R/W;;;;The bit is used to set MOSI line polarity, 1: high 0, low;
;;;;;;spi_q_pol;[18];1'b1;R/W;;;;The bit is used to set MISO line polarity, 1: high 0, low;
;;;;;;;[17:15];3'h0;RO;;;;;
;;;;;;spi_fread_dual;[14];1'b0;R/W;;;;In the read operations, read-data phase apply 2 signals. 1: enable 0: disable. ;
;;;;;;spi_fast_rd_mode;[13];1'b0;R/W;;;;Enable 2/4 lines addr command, including read and write command.;
;;;;;;;[12:9];4'h0;RO;;;;;
;;;;;;spi_fcmd_quad;[8];1'b0;R/W;;;;Apply 4 signals during command phase 1:enable 0: disable;
;;;;;;spi_fcmd_dual;[7];1'b0;R/W;;;;Apply 2 signals during command phase 1:enable 0: disable;
;;;;;;spi_faddr_quad;[6];1'b0;R/W;;;;Apply 4 signals during addr phase 1:enable 0: disable;
;;;;;;spi_faddr_dual;[5];1'b0;R/W;;;;Apply 2 signals during addr phase 1:enable 0: disable;
;;;;;;;[4];1'b0;RO;;;;reserved;
;;;;;;spi_dummy_out;[3];1'b0;R/W;;;;In the dummy phase the signal level of spi is output by the spi controller.;
;;;;;N/A;spi_ext_hold_en;[2];1'b0;R/W;;;;Set the bit to hold spi. The bit is combined with spi_usr_prep_hold,spi_usr_cmd_hold,spi_usr_addr_hold,spi_usr_dummy_hold,spi_usr_din_hold,spi_usr_dout_hold and spi_usr_hold_pol.  ;
;;;;;;;[1:0];2'b0;RO;;;;reserved;
0x00C;SPI_CTRL1;clk;reset_n;;;;[31:20];12'h0;R/W;;;;;
;;;;;N/A;spi_cs_hold_delay;[19:14];6'h1;R/W;;;;SPI cs signal is delayed by spi clock cycles. ;
;;;;;;;[13:5];9'h0;RO;;;;reserved;
;;;;;;spi_w16_17_wr_ena;[4];1'h1;R/W;;;;1:reg_buf[16] [17] can be written   0:reg_buf[16] [17] can not  be written.;
;;;;;;spi_rsck_data_out;[3];1'h0;R/W;;;;It saves half a cycle when tsck is the same as rsck. 1: output data at rsck posedge   0: output data at tsck posedge ;
;;;;;;spi_clk_mode_13;[2];1'h0;R/W;;;;{CPOL, CPHA},1: support spi clk mode 1 and 3, first edge output data B[0]/B[7]; 0: support spi clk mode 0 and 2, first edge output data B[1]/B[6].
;;;;;;spi_clk_mode;[1:0];2'h0;R/W;;;;SPI clock mode bits. 0: SPI clock is off when CS inactive 1: SPI clock is delayed one cycle after CS inactive 2: SPI clock is delayed two cycles after CS inactive 3: SPI clock is alwasy on.;
0x010;SPI_CTRL2;clk;reset_n;;;;[31];1'b0;RO;;;;;
;;;;;;spi_cs_delay_num;[30:29];2'h0;R/W;;;;spi_cs signal is delayed by system clock cycles;
;;;;;;spi_cs_delay_mode;[28:26];3'h0;R/W;;;;spi_cs signal is delayed by spi_clk . 0: zero 1: if spi_ck_out_edge or spi_ck_i_edge is set 1 delayed by half cycle  else delayed by one cycle 2: if spi_ck_out_edge or spi_ck_i_edge is set 1 delayed by one cycle, else delayed by half cycle 3: delayed one cycle;
;;;;;;spi_cs_hold_time;[25:13];13'h1;R/W;;;;delay cycles of cs pin by spi clock this bits are combined with spi_cs_hold bit.;
;;;;;;spi_cs_setup_time;[12:0];13'h1;R/W;;;;(cycles-1) of prepare phase by spi clock this bits are combined with spi_cs_setup bit.;
0x014;SPI_CLOCK;clk;reset_n;;;spi_clk_equ_sysclk;[31];1'b1;R/W;;;;In the master mode 1: spi_clk is eqaul to system 0: spi_clk is divided from system clock.;
;;;;;;spi_clkdiv_pre;[30:18];13'b0;R/W;;;;In the master mode it is pre-divider of spi_clk. ;
;;;;;;spi_clkcnt_N;[17:12];6'h3;R/W;;;;In the master mode it is the divider of spi_clk. So spi_clk frequency is system/(spi_clkdiv_pre+1)/(spi_clkcnt_N+1);
;;;;;;spi_clkcnt_H;[11:6];6'h1;R/W;;;;In the master mode it must be floor((spi_clkcnt_N+1)/2-1). In the slave mode it must be 0.;
;;;;;;spi_clkcnt_L;[5:0];6'h3;R/W;;;;In the master mode it must be equal to spi_clkcnt_N. In the slave mode it must be 0.;
0x018;SPI_USER;clk;reset_n;;;spi_usr_command;[31];1'b1;R/W;;;;This bit enable the command phase of an operation.;
;;;;;;spi_usr_addr;[30];1'b0;R/W;;;;This bit enable the address phase of an operation.;
;;;;;;spi_usr_dummy;[29];1'b0;R/W;;;;This bit enable the dummy phase of an operation.;
;;;;;;spi_usr_miso;[28];1'b0;R/W;;;;This bit enable the read-data phase of an operation.;
;;;;;;spi_usr_mosi;[27];1'b0;R/W;;;;This bit enable the write-data phase of an operation.;
;;;;;;spi_usr_dummy_idle;[26];1'b0;R/W;;;;spi clock is disable in dummy phase when the bit is enable.;
;;;;;;spi_usr_mosi_highpart;[25];1'b0;R/W;;;;write-data phase only access to high-part of the buffer spi_w8~spi_w15. 1: enable 0: disable. ;
;;;;;;spi_usr_miso_highpart;[24];1'b0;R/W;;;;read-data phase only access to high-part of the buffer spi_w8~spi_w15. 1: enable 0: disable. ;
;;;;;N/A;spi_usr_prep_hold;[23];1'b0;R/W;;;;spi is hold at prepare state the bit are combined with spi_usr_hold_pol bit.;
;;;;;N/A;spi_usr_cmd_hold;[22];1'b0;R/W;;;;spi is hold at command state the bit are combined with spi_usr_hold_pol bit.;
;;;;;N/A;spi_usr_addr_hold;[21];1'b0;R/W;;;;spi is hold at address state the bit are combined with spi_usr_hold_pol bit.;
;;;;;N/A;spi_usr_dummy_hold;[20];1'b0;R/W;;;;spi is hold at dummy state the bit are combined with spi_usr_hold_pol bit.;
;;;;;N/A;spi_usr_din_hold;[19];1'b0;R/W;;;;spi is hold at data in state the bit are combined with spi_usr_hold_pol bit.;
;;;;;N/A;spi_usr_dout_hold;[18];1'b0;R/W;;;;spi is hold at data out state the bit are combined with spi_usr_hold_pol bit.;
;;;;;N/A;spi_usr_hold_pol;[17];1'b0;R/W;;;;It is combined with hold bits to set the polarity of spi hold line 1: spi will be held when spi hold line is high 0: spi will be held when spi hold line is low;
;;;;;;spi_sio;[16];1'b0;R/W;;;;Set the bit to enable 3-line half duplex communication mosi and miso signals share the same pin. 1: enable 0: disable. ;
;;;;;;spi_usr_conf_nxt;[15];1'b0;R/W;;;;1: Enable the DMA CONF phase of next seg-trans operation, which means seg-trans will continue. 0: The seg-trans will end after the current SPI seg-trans or this is not seg-trans mode.;
;;;;;;;[14];1'b0;RO;;;;reserved;
;;;;;;spi_fwrite_quad;[13];1'b0;R/W;;;;In the write operations read-data phase apply 4 signals;
;;;;;;spi_fwrite_dual;[12];1'b0;R/W;;;;In the write operations read-data phase apply 2 signals;
;;;;;;spi_wr_byte_order;[11];1'b0;R/W;;;;In command address write-data (MOSI) phases 1: big-endian 0: litte_endian;
;;;;;;spi_rd_byte_order;[10];1'b0;R/W;;;;In read-data (MISO) phase 1: big-endian 0: little_endian;
;;;;;;spi_ck_out_edge;[9];1'b0;R/W;;;;the bit combined with spi_mosi_delay_mode bits to set mosi signal delay mode. ;
;;;;;;spi_rsck_i_edge;[8];1'b0;R/W;;;;In the slave mode, this bit can be used to change the polarity of rsck. 0: rsck = !spi_ck_i. 1:rsck = spi_ck_i.;
;;;;;;spi_cs_setup;[7];1'b0;R/W;;;;spi cs is enable when spi is in  prepare  phase. 1: enable 0: disable. ;
;;;;;;spi_cs_hold;[6];1'b0;R/W;;;;spi cs keep low when spi is in  done  phase. 1: enable 0: disable. ;
;;;;;;spi_tsck_i_edge;[5];1'b0;R/W;;;;In the slave mode, this bit can be used to change the polarity of tsck. 0: tsck = spi_ck_i. 1:tsck = !spi_ck_i.;
;;;;;;;[4];1'b0;RO;;;;reserved;
;;;;;;spi_tx_start_bit;[3:1];3'd7;R/W;;;;It determines the start time of tx output data. It can be used for timing adjustment in MISO slave mode.;
;;;;;;spi_doutdin;[0];1'b0;R/W;;;;Set the bit to enable full duplex communication. 1: enable 0: disable. ;
0x01C;SPI_USER1;clk;reset_n;;;spi_usr_addr_bitlen;[31:26];6'd23;R/W;;;;The length in bits of address phase. The register value shall be (bit_num-1).;
;;;;;;;[25:8];18'd0;RO;;;;reserved;
;;;;;;spi_usr_dummy_cyclelen;[7:0];8'd7;R/W;;;;The length in spi_clk cycles of dummy phase. The register value shall be (cycle_num-1).;
0x020;SPI_USER2;clk;reset_n;;;spi_usr_command_bitlen;[31:28];4'd7;R/W;;;;The length in bits of command phase. The register value shall be (bit_num-1);
;;;;;;;[27:16];12'b0;RO;;;;reserved;
;;;;;;spi_usr_command_value;[15:0];16'b0;R/W;;;;The value of  command.;
0x024;SPI_MOSI_DLEN;clk;reset_n;;;;[31:24];8'b0;RO;;;;reserved;
;;;;;;spi_usr_mosi_dbitlen;[23:0];24'h0;R/W;;;;The length in bits of write-data. The register value shall be (bit_num-1).;
0x028;SPI_MISO_DLEN;clk;reset_n;;;;[31:24];8'b0;RO;;;;reserved;
;;;;;;spi_usr_miso_dbitlen;[23:0];24'h0;R/W;;;;The length in bits of  read-data. The register value shall be (bit_num-1).;
0x02C;SPI_SLV_WR_STATUS;clk;reset_n;;;spi_slv_wr_status;[31:0];32'b0;R/W;;;;In the master mode this register are the higher 32bits in the 64 bits address condition.;
0x030;SPI_MISC;clk;reset_n;;;quad_din_pin_swap;[31];1'h0;R/W;;;;1:  spi quad input swap enable  0:  spi quad input swap disable ;
;;;;;;spi_cs_keep_active;[30];1'b0;R/W;;;;spi cs line keep low when the bit is set.;
;;;;;;spi_ck_idle_edge;[29];1'b0;R/W;;;;1: spi clk line is high when idle     0: spi clk line is low when idle ;
;;;;;;;[28];1'b0;RO;;;;reserved;
;;;;;;spi_q_idle_out;[27];1'b0;R/W;;;;The idle output value of spi_q.;
;;;;;;spi_cd_idle_edge;[26];1'b0;R/W;;;;The default value of spi_cd.;
;;;;;;spi_cd_cmd_set;[25];1'b0;R/W;;;;1: spi_cd = !spi_cd_idle_edge when spi_st[3:0] is in SPI_SEND_CMD state.  0: spi_cd = spi_cd_idle_edge. ;
;;;;;;spi_dqs_idle_edge ;[24];1'b0;R/W;;;;The default value of spi_dqs.;
;;;;;;slave_cs_pol;[23];1'b0;R/W;;;;spi slave input cs polarity select. 1: inv  0: not change;
;;;;;;spi_cd_addr_set;[22];1'b0;R/W;;;;1: spi_cd = !spi_cd_idle_edge when spi_st[3:0] is in SPI_SEND_ADDR state.  0: spi_cd = spi_cd_idle_edge. ;
;;;;;;;[21:9];13'h0;RO;;;;reserved;
;;;;;;spi_master_cs_pol;[8:6];3'b0;R/W;;;;In the master mode the bits are the polarity of spi cs line, the value is equivalent to spi_cs ^ spi_master_cs_pol.;
;;;;;;spi_ck_dis;[5];1'b0;R/W;;;;1: spi clk out disable,  0: spi clk out enable;
;;;;;;;[4:3];2'b11;RO;;;;reserved;
;;;;;;spi_cs2_dis;[2];1'b1;R/W;;;;SPI CS2 pin enable, 1: disable CS2, 0: spi_cs2 signal is from/to CS2 pin;
;;;;;;spi_cs1_dis;[1];1'b1;R/W;;;;SPI CS1 pin enable, 1: disable CS1, 0: spi_cs1 signal is from/to CS1 pin;
;;;;;;spi_cs0_dis;[0];1'b0;R/W;;;;SPI CS0 pin enable, 1: disable CS0, 0: spi_cs0 signal is from/to CS0 pin;
0x034;SPI_SLAVE;clk;reset_n;;;spi_sync_reset;[31];1'b0;R/W;;;;Software reset enable, reset the spi clock line cs line and data lines.;
;;;;;;spi_slave_mode;[30];1'b0;R/W;;;;Set SPI work mode. 1: slave mode 0: master mode.;
;;;;;;spi_trans_done_auto_clr_en;[29];1'b0;R/W;;;;spi_trans_done auto clear enable, clear it 3 apb cycles after the pos edge of spi_trans_done.  0:disable. 1: enable.;
;;;;;;;[28];1'b0;RO;;;;reserved;
;;;;;;;[27];1'b0;RO;;;;reserved;
;;;;;;spi_trans_cnt;[26:23];4'b0;RO;;;;The operations counter in both the master mode and the slave mode. ;
;;;;;;;[22:11];12'b0;RO;;;;reserved;
;;;;;;spi_int_dma_seg_trans_en;[10];1'b0;R/W;;;;spi_dma_seg_trans_done Interrupt enable. 1: enable 0: disable;
;;;;;;spi_int_trans_done_en;[9];1'b1;R/W;;;;spi_trans_done Interrupt enable. 1: enable 0: disable;
;;;;;;spi_int_wr_dma_done_en;[8];1'b0;R/W;;;;spi_slv_wr_dma Interrupt enable. 1: enable 0: disable;
;;;;;;spi_int_rd_dma_done_en;[7];1'b0;R/W;;;;spi_slv_rd_dma Interrupt enable. 1: enable 0: disable;
;;;;;;spi_int_wr_buf_done_en;[6];1'b0;R/W;;;;spi_slv_wr_buf Interrupt enable. 1: enable 0: disable;
;;;;;;spi_int_rd_buf_done_en;[5];1'b0;R/W;;;;spi_slv_rd_buf Interrupt enable. 1: enable 0: disable;
;;;;;;spi_trans_done;[4];1'b0;R/W;;;;The interrupt raw bit for the completion of any operation in both the master mode and the slave mode.  Can not be changed by CONF_buf.;
;;;;;;;[3:0];4'd0;RO;;;;reserved;
0x038;SPI_SLAVE1;clk;reset_n;;;;[31:22];10'd0;RO;;;;reserved;
;;;;;;spi_slv_last_addr;[21:15];7'b0;R/W;;;;In the slave mode it is the value of address.;
;;;;;;spi_slv_last_command;[14:12];3'b0;R/W;;;;In the slave mode it is the value of command.;
;;;;;;spi_slv_wr_dma_done;[11];1'b0;R/W;;;;The interrupt raw bit for the completion of dma write operation in the slave mode.  Can not be changed by CONF_buf.;
;;;;;;;[10:8];3'd0;RO;;;;reserved;
;;;;;;spi_slv_wr_addr_bytelen;[7:4];4'h1;R/W;;;;In the slave mode it is the address length in bytes for write-buffer operation. The register value shall be byte_num.;
;;;;;;spi_slv_rd_addr_bytelen;[3:0];4'h1;R/W;;;;In the slave mode it is the address length in bytes for read-buffer operation. The register value shall be byte_num.;
0x03C;SPI_SLAVE2;clk;reset_n;;;;[31:9];23'b0;RO;;;;reserved;
;;;;;;spi_slv_rd_dma_done;[8];1'b0;R/W;;;;The interrupt raw bit for the completion of Rd-DMA operation in the slave mode.  Can not be changed by CONF_buf.;
;;;;;;spi_slv_wr_dummy_bytelen;[7:4];4'h1;R/W;;;;In the slave mode it is the length in spi_clk byte cycles of dummy phase for write operations. ;
;;;;;;spi_slv_rd_dummy_bytelen;[3:0];4'h1;R/W;;;;In the slave mode it is the length in spi_clk byte cycles of dummy phase for read operations. ;
0x040;SPI_SLV_WRBUF_DLEN;clk;reset_n;;;spi_conf_base_bitlen;[31:25];7'd108;R/W;;;;The basic spi_clk cycles of CONF state. The real cycle length of CONF state, if spi_usr_conf is enabled, is spi_conf_base_bitlen[6:0] + spi_conf_bitlen[23:0].;
;;;;;;spi_slv_wr_buf_done;[24];1'b0;R/W;;;;The interrupt raw bit for the completion of write-buffer operation in the slave mode.  Can not be changed by CONF_buf.;
;;;;;;;[23:0];24'h0;RO;;;;reserved;
0x044;SPI_SLV_RDBUF_DLEN;clk;reset_n;;;;[31:26];6'b0;RO;;;;reserved;
;;;;;;spi_seg_magic_err;[25];1'b0;R/W;;;;1: The recent magic value in CONF buffer is not right in master DMA seg-trans mode. 0: others.;
;;;;;;spi_slv_rd_buf_done;[24];1'b0;R/W;;;;The interrupt raw bit for the completion of read-buffer operation in the slave mode.  Can not be changed by CONF_buf.;
;;;;;;spi_slv_dma_rd_bytelen;[23:0];24'h0;R/W;;;;In the slave mode it is the length in bytes for read operations. The register value shall be byte_num.;
0x048;SPI_SLV_RD_BYTE;clk;reset_n;;;spi_usr_conf;[31];1'b0;R/W;;;;1: Enable the DMA CONF phase of current seg-trans operation, which means seg-trans will start. 0: This is not seg-trans mode.;
;;;;;;;[30];1'b0;RO;;;;;
;;;;;;spi_dma_seg_magic_value;[29:24];6'd23;R/W;;;;The magic value of BM table in master DMA seg-trans.;
;;;;;;spi_slv_rdata_byte;[23:0];24'b0;R/W;;;;In the slave mode it is the byte number of read data.;
0x050;SPI_FSM;clk;reset_n;;;spi_mst_dma_rd_bytelen;[31:8];24'h0;R/W;;;;Define the master DMA read byte length in non seg-trans or seg-trans mode. Invalid when spi_rx_eof_en is 0.;
;;;;;;;[7:4];4'd0;RO;;;;reserved;
;;;;;;spi_st;[3:0];4'b0;RO;;;;The status of spi state machine. 0: idle state, 1: preparation state, 2: send command state, 3: send data state, 4: red data state, 5:write data state, 6: wait state, 7: done state.;
0x054;SPI_HOLD;clk;reset_n;;N/A;;[31:8];24'b0;RO;;;;reserved;
;;;;;;spi_dma_seg_trans_done;[7];1'b0;R/W;;;;1:  spi master DMA full-duplex/half-duplex seg-trans ends or slave half-duplex seg-trans ends. And data has been pushed to corresponding memory.  0:  seg-trans is not ended or not occurred.  Can not be changed by CONF_buf.;
;;;;;;spi_hold_out_time;[6:4];3'b0;R/W;;;;set the hold cycles of output spi_hold signal when spi_hold_out_en is enable.;
;;;;;;spi_hold_out_en;[3];1'b0;R/W;;;;Enable set spi output hold value to spi_hold_reg. It can be used to hold spi state machine with spi_ext_hold_en and other usr hold signals.;
;;;;;;spi_hold_val_reg;[2];1'b0;R/W;;;;spi hold output value, which should be used with spi_hold_out_en.;
;;;;;N/A;spi_int_hold_ena;[1:0];2'b0;R/W;;;;This register is for two SPI masters to share the same cs clock and data signals. The bits of one SPI are set, if the other SPI is busy, the SPI will be hold. 1(3): hold at  idle  phase 2: hold at  prepare  phase.;
0x058;SPI_DMA_CONF;clk;reset_n;;;;[31:26];6'h0;R/W;;;;;
;;;;;;spi_dma_outfifo_empty_err;[25];1'b0;R/W;;;;1:spi_dma_outfifo_empty and spi_pop_data_prep are valid, which means that there is no data to pop but pop is valid.  0: Others.  Can not be changed by CONF_buf.;
;;;;;;spi_dma_infifo_full_err;[24];1'b0;R/W;;;;1:spi_dma_infifo_full and spi_push_data_prep are valid, which means that DMA Rx buffer is full but push is valid.  0: Others.  Can not be changed by CONF_buf.;
;;;;;;spi_dma_outfifo_empty_clr;[23];1'b0;R/W;;;;1:Clear spi_dma_outfifo_empty_vld. 0: Do not control it.;
;;;;;;spi_dma_infifo_full_clr;[22];1'b0;R/W;;;;1:Clear spi_dma_infifo_full_vld. 0: Do not control it.;
;;;;;;spi_rx_eof_en;[21];1'b0;R/W;;;;spi_dma_inlink_eof can be set by dma_push_cnt[23:0] in spi dma transition. 1: spi_dma_inlink_eof is set by dma_push_cnt[23:0].; 0: no spi_dma_inlink_eof, only null data can set dma inlink eof.
;;;;;;spi_slv_tx_seg_trans_clr_en;[20];1'b0;R/W;;;;1: spi_dma_outfifo_empty_vld is cleared by spi slave cmd 6. 0: spi_dma_outfifo_empty_vld is cleared by spi_trans_done.;
;;;;;;spi_slv_rx_seg_trans_clr_en;[19];1'b0;R/W;;;;1: spi_dma_infifo_full_vld is cleared by spi slave cmd 5. 0: spi_dma_infifo_full_vld is cleared by spi_trans_done.;
;;;;;;spi_dma_slv_seg_trans_en;[18];1'b0;R/W;;;;Enable dma segment transfer in spi dma half slave mode. 1: enable. 0: disable.;
;;;;;;;[17];1'b0;RO;;;;;
;;;;;;spi_dma_continue;[16];1'b0;R/W;;;;spi dma continue tx/rx data.;
;;;;;;spi_dma_tx_stop;[15];1'b0;R/W;;;;spi dma write data stop when in continue tx/rx mode.;
;;;;;;spi_dma_rx_stop;[14];1'b0;R/W;;;;spi dma read data stop  when in continue tx/rx mode.;
;;;;;;spi_mem_trans_en;[13];1'b0;R/W;;;;;
;;;;;;spi_out_data_burst_en;[12];1'b0;R/W;;;;spi dma read data from memory in burst mode.;
;;;;;;spi_indscr_burst_en;[11];1'b0;R/W;;;;read descriptor use burst mode when write data to memory.;
;;;;;;spi_outdscr_burst_en;[10];1'b0;R/W;;;;read descriptor use burst mode when read data for memory.;
;;;;;;spi_out_eof_mode;[9];1'b1;R/W;;;;out eof flag generation mode . 1: when dma pop all data from fifo  0:when ahb push all data to fifo.;
;;;;;N/A;spi_out_auto_wrback;[8];1'b0;R/W;;;;when the bit is set, DMA continue to use the next inlink node when the length of inlink is 0.;
;;;;;N/A;spi_out_loop_test;[7];1'b0;R/W;;;;Set bit to test out link.;
;;;;;N/A;spi_in_loop_test;[6];1'b0;R/W;;;;Set bit to test in link.;
;;;;;;spi_ahbm_rst;[5];1'b0;R/W;;;;Reset spi dma ahb master.;
;;;;;;spi_ahbm_fifo_rst;[4];1'b0;R/W;;;;Reset spi dma ahb master fifo pointer.;
;;;;;;spi_out_rst;[3];1'b0;R/W;;;;The bit is used to reset out dma fsm and out data fifo pointer.;
;;;;;;spi_in_rst;[2];1'b0;R/W;;;;The bit is used to reset in dma fsm and in data fifo pointer.;
;;;;;;;[1:0];2'b0;RO;;;;reserved;
0x05C;SPI_DMA_OUT_LINK;clk;reset_n;;;spi_dma_tx_ena;[31];1'b0;R/W;;;;spi dma write data status bit.;
;;;;;;spi_outlink_restart;[30];1'b0;R/W;;;;Set the bit to mount on new outlink descriptors.;
;;;;;;spi_outlink_start;[29];1'b0;R/W;;;;Set the bit to start to use outlink descriptor.;
;;;;;;spi_outlink_stop;[28];1'b0;R/W;;;;Set the bit to stop to use outlink descriptor.;
;;;;;;;[27:20];8'h0;R/W;;;;reserved;
;;;;;;spi_outlink_addr;[19:0];20'h0;R/W;;;;The address of the first outlink descriptor.;
0x060;SPI_DMA_IN_LINK;clk;reset_n;;;spi_dma_rx_ena;[31];1'b0;R/W;;;;spi dma read data status bit.;
;;;;;;spi_inlink_restart;[30];1'b0;R/W;;;;Set the bit to mount on new inlink descriptors.;
;;;;;;spi_inlink_start;[29];1'b0;R/W;;;;Set the bit to start to use inlink descriptor.;
;;;;;;spi_inlink_stop;[28];1'b0;R/W;;;;Set the bit to stop to use inlink descriptor.;
;;;;;;;[27:21];7'h0;RO;;;;reserved;
;;;;;;spi_inlink_auto_ret;[20];1'b0;R/W;;;;when the bit is set, the inlink descriptor returns to the first link node when a packet is error.;
;;;;;;spi_inlink_addr;[19:0];20'h0;R/W;;;;The address of the first inlink descriptor.;
0x064;SPI_DMA_INT_ENA;clk;reset_n;;;;[31:9];23'h0;RO;;;;reserved;
;;;;;;spi_out_total_eof_int_ena;[8];1'b0;R/W;;;;The enable bit for sending all the packets to host done.;
;;;;;;spi_out_eof_int_ena;[7];1'b0;R/W;;;;The enable bit for sending a packet to host done.;
;;;;;;spi_out_done_int_ena;[6];1'b0;R/W;;;;The enable bit for completing usage of a outlink descriptor .;
;;;;;;spi_in_suc_eof_int_ena;[5];1'b0;R/W;;;;The enable bit for completing receiving all the packets from host.;
;;;;;;spi_in_err_eof_int_ena;[4];1'b0;R/W;;;;The enable bit for receiving error.;
;;;;;;spi_in_done_int_ena;[3];1'b0;R/W;;;;The enable bit for completing usage of a inlink descriptor.;
;;;;;;spi_inlink_dscr_error_int_ena;[2];1'b0;R/W;;;;The enable bit for inlink descriptor error.;
;;;;;;spi_outlink_dscr_error_int_ena;[1];1'b0;R/W;;;;The enable bit for outlink descriptor error.;
;;;;;;spi_inlink_dscr_empty_int_ena;[0];1'b0;R/W;;;;The enable bit for lack of enough inlink descriptors.;
0x068;SPI_DMA_INT_RAW;clk;reset_n;;;;[31:9];23'h0;RO;;;;reserved;
;;;;;;spi_out_total_eof_int_raw;[8];1'b0;RO;;;;The raw bit for sending all the packets to host done.;
;;;;;;spi_out_eof_int_raw;[7];1'b0;RO;;;;The raw bit for sending a packet to host done.;
;;;;;;spi_out_done_int_raw;[6];1'b0;RO;;;;The raw bit for completing usage of a outlink descriptor.;
;;;;;;spi_in_suc_eof_int_raw;[5];1'b0;RO;;;;The raw bit for completing receiving all the packets from host.;
;;;;;;spi_in_err_eof_int_raw;[4];1'b0;RO;;;;The raw bit for receiving error.;
;;;;;;spi_in_done_int_raw;[3];1'b0;RO;;;;The raw bit for completing usage of a inlink descriptor.;
;;;;;;spi_inlink_dscr_error_int_raw;[2];1'b0;RO;;;;The raw bit for inlink descriptor error.;
;;;;;;spi_outlink_dscr_error_int_raw;[1];1'b0;RO;;;;The raw bit for outlink descriptor error.;
;;;;;;spi_inlink_dscr_empty_int_raw;[0];1'b0;RO;;;;The raw bit for lack of enough inlink descriptors.;
0x06C;SPI_DMA_INT_ST;clk;reset_n;;;;[31:9];23'h0;RO;;;;reserved;
;;;;;;spi_out_total_eof_int_st;[8];1'b0;RO;;;;The status bit for sending all the packets to host done.;
;;;;;;spi_out_eof_int_st;[7];1'b0;RO;;;;The status bit for sending a packet to host done.;
;;;;;;spi_out_done_int_st;[6];1'b0;RO;;;;The status bit for completing usage of a outlink descriptor.;
;;;;;;spi_in_suc_eof_int_st;[5];1'b0;RO;;;;The status bit for completing receiving all the packets from host.;
;;;;;;spi_in_err_eof_int_st;[4];1'b0;RO;;;;The status bit for receiving error.;
;;;;;;spi_in_done_int_st;[3];1'b0;RO;;;;The status bit for completing usage of a inlink descriptor.;
;;;;;;spi_inlink_dscr_error_int_st;[2];1'b0;RO;;;;The status bit for inlink descriptor error.;
;;;;;;spi_outlink_dscr_error_int_st;[1];1'b0;RO;;;;The status bit for outlink descriptor error.;
;;;;;;spi_inlink_dscr_empty_int_st;[0];1'b0;RO;;;;The status bit for lack of enough inlink descriptors.;
0x070;SPI_DMA_INT_CLR;clk;reset_n;;;;[31:9];23'h0;RO;;;;reserved;
;;;;;;spi_out_total_eof_int_clr;[8];1'b0;R/W;;;;The clear bit for sending all the packets to host done.;
;;;;;;spi_out_eof_int_clr;[7];1'b0;R/W;;;;The clear bit for sending a packet to host done.;
;;;;;;spi_out_done_int_clr;[6];1'b0;R/W;;;;The clear bit for completing usage of a outlink descriptor.;
;;;;;;spi_in_suc_eof_int_clr;[5];1'b0;R/W;;;;The clear bit for completing receiving all the packets from host.;
;;;;;;spi_in_err_eof_int_clr;[4];1'b0;R/W;;;;The clear bit for receiving error.;
;;;;;;spi_in_done_int_clr;[3];1'b0;R/W;;;;The clear bit for completing usage of a inlink descriptor.;
;;;;;;spi_inlink_dscr_error_int_clr;[2];1'b0;R/W;;;;The clear bit for inlink descriptor error.;
;;;;;;spi_outlink_dscr_error_int_clr;[1];1'b0;R/W;;;;The clear bit for outlink descriptor error.;
;;;;;;spi_inlink_dscr_empty_int_clr;[0];1'b0;R/W;;;;The clear bit for lack of enough inlink descriptors.;
0x074;SPI_IN_ERR_EOF_DES_ADDR;clk;reset_n;;;spi_dma_in_err_eof_des_addr;[31:0];32'b0;RO;;;;The inlink descriptor address when spi dma produce receiving error.;
0x078;SPI_IN_SUC_EOF_DES_ADDR;clk;reset_n;;;spi_dma_in_suc_eof_des_addr;[31:0];32'b0;RO;;;;The last inlink descriptor address when spi dma produce from_suc_eof.;
0x07C;SPI_INLINK_DSCR;clk;reset_n;;;spi_dma_inlink_dscr;[31:0];32'b0;RO;;;;The content of current in descriptor pointer.;
0x080;SPI_INLINK_DSCR_BF0;clk;reset_n;;;spi_dma_inlink_dscr_bf0;[31:0];32'b0;RO;;;;The content of next in descriptor pointer.;
0x084;SPI_INLINK_DSCR_BF1;clk;reset_n;;;spi_dma_inlink_dscr_bf1;[31:0];32'b0;RO;;;;The content of current in descriptor data buffer pointer.;
0x088;SPI_OUT_EOF_BFR_DES_ADDR;clk;reset_n;;;spi_dma_out_eof_bfr_des_addr;[31:0];32'b0;RO;;;;The address of buffer relative to the outlink descriptor that produce eof.;
0x08C;SPI_OUT_EOF_DES_ADDR;clk;reset_n;;;spi_dma_out_eof_des_addr;[31:0];32'b0;RO;;;;The last outlink descriptor address when spi dma produce to_eof.;
0x090;SPI_OUTLINK_DSCR;clk;reset_n;;;spi_dma_outlink_dscr;[31:0];32'b0;RO;;;;The content of current out descriptor pointer.;
0x094;SPI_OUTLINK_DSCR_BF0;clk;reset_n;;;spi_dma_outlink_dscr_bf0;[31:0];32'b0;RO;;;;The content of next out descriptor pointer.;
0x098;SPI_OUTLINK_DSCR_BF1;clk;reset_n;;;spi_dma_outlink_dscr_bf1;[31:0];32'b0;RO;;;;The content of current out descriptor data buffer pointer.;
0x09C;SPI_DMA_OUTSTATUS;clk;reset_n;;;spi_dma_outfifo_empty;[31];1'b1;RO;;;;SPI dma outfifo is empty.;
;;;;;;spi_dma_outfifo_full;[30];1'b0;RO;;;;SPI dma outfifo is full.;
;;;;;;spi_dma_outfifo_cnt;[29:23];7'b0;RO;;;;The remains of SPI dma outfifo data.;
;;;;;;spi_dma_out_state;[22:20];3'b0;RO;;;;SPI dma out data state.;
;;;;;;spi_dma_outdscr_state;[19:18];2'b0;RO;;;;SPI dma out descriptor state.;
;;;;;;spi_dma_outdscr_addr;[17:0];18'b0;RO;;;;SPI dma out descriptor address.;
0x0A0;SPI_DMA_INSTATUS;clk;reset_n;;;spi_dma_infifo_empty;[31];1'b1;RO;;;;SPI dma infifo is empty.;
;;;;;;spi_dma_infifo_full;[30];1'b0;RO;;;;SPI dma infifo is full.;
;;;;;;spi_dma_infifo_cnt;[29:23];7'b0;RO;;;;The remains of SPI dma infifo data.;
;;;;;;spi_dma_in_state;[22:20];3'b0;RO;;;;SPI dma in data state.;
;;;;;;spi_dma_indscr_state;[19:18];2'b0;RO;;;;SPI dma in descriptor state.;
;;;;;;spi_dma_indscr_addr;[17:0];18'b0;RO;;;;SPI dma in descriptor address.;
0x0A4;SPI_W0;clk;reset_n;;;spi_buf0;[31:0];32'b0;R/W;;;;data buffer;
0x0A8;SPI_W1;clk;reset_n;;;spi_buf1;[31:0];32'b0;R/W;;;;data buffer;
0x0AC;SPI_W2;clk;reset_n;;;spi_buf2;[31:0];32'b0;R/W;;;;data buffer;
0x0B0;SPI_W3;clk;reset_n;;;spi_buf3;[31:0];32'b0;R/W;;;;data buffer;
0x0B4;SPI_W4;clk;reset_n;;;spi_buf4;[31:0];32'b0;R/W;;;;data buffer;
0x0B8;SPI_W5;clk;reset_n;;;spi_buf5;[31:0];32'b0;R/W;;;;data buffer;
0x0BC;SPI_W6;clk;reset_n;;;spi_buf6;[31:0];32'b0;R/W;;;;data buffer;
0x0C0;SPI_W7;clk;reset_n;;;spi_buf7;[31:0];32'b0;R/W;;;;data buffer;
0x0C4;SPI_W8;clk;reset_n;;;spi_buf8;[31:0];32'b0;R/W;;;;data buffer;
0x0C8;SPI_W9;clk;reset_n;;;spi_buf9;[31:0];32'b0;R/W;;;;data buffer;
0x0CC;SPI_W10;clk;reset_n;;;spi_buf10;[31:0];32'b0;R/W;;;;data buffer;
0x0D0;SPI_W11;clk;reset_n;;;spi_buf11;[31:0];32'b0;R/W;;;;data buffer;
0x0D4;SPI_W12;clk;reset_n;;;spi_buf12;[31:0];32'b0;R/W;;;;data buffer;
0x0D8;SPI_W13;clk;reset_n;;;spi_buf13;[31:0];32'b0;R/W;;;;data buffer;
0x0DC;SPI_W14;clk;reset_n;;;spi_buf14;[31:0];32'b0;R/W;;;;data buffer;
0x0E0;SPI_W15;clk;reset_n;;;spi_buf15;[31:0];32'b0;R/W;;;;data buffer;
0x0E4;SPI_W16;clk;reset_n;;;spi_buf16;[31:0];32'b0;R/W;;;;data buffer;
0x0E8;SPI_W17;clk;reset_n;;;spi_buf17;[31:0];32'b0;R/W;;;;data buffer;
0x0EC;SPI_DIN_MODE;clk;reset_n;;;;[31:13];19'b0;RO;;;;reserved;
;;;;;;spi_timing_clk_ena;[12];1'b1;R/W;;;;1:enable hclk in spi_timing.v; 0: disable it
;;;;;;spi_din3_mode;[11:9];3'h0;R/W;;;;the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk;
;;;;;;spi_din2_mode;[8:6];3'h0;R/W;;;;the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk;
;;;;;;spi_din1_mode;[5:3];3'h0;R/W;;;;the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk;
;;;;;;spi_din0_mode;[2:0];3'h0;R/W;;;;the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk;
0x0F0;SPI_DIN_NUM;clk;reset_n;;;;[31:8];24'b0;RO;;;;reserved;
;;;;;;spi_din3_num;[7:6];2'h0;R/W;;;;the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...;
;;;;;;spi_din2_num;[5:4];2'h0;R/W;;;;the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...;
;;;;;;spi_din1_num;[3:2];2'h0;R/W;;;;the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...;
;;;;;;spi_din0_num;[1:0];2'h0;R/W;;;;the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...;
0x0F4;SPI_DOUT_MODE;clk;reset_n;;;;[31:15];17'h0;RO;;;;reserved;
;;;;;;spi_dout4_mode;[14:12];3'h0;R/W;;;;the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk;
;;;;;;spi_dout3_mode;[11:9];3'h0;R/W;;;;the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk;
;;;;;;spi_dout2_mode;[8:6];3'h0;R/W;;;;the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk;
;;;;;;spi_dout1_mode;[5:3];3'h0;R/W;;;;the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk;
;;;;;;spi_dout0_mode;[2:0];3'h0;R/W;;;;the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk;
0x0F8;SPI_DOUT_NUM;clk;reset_n;;;;[31:10];22'h0;RO;;;;reserved;
;;;;;;spi_dout4_num;[9:8];2'h0;R/W;;;;the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...;
;;;;;;spi_dout3_num;[7:6];2'h0;R/W;;;;the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...;
;;;;;;spi_dout2_num;[5:4];2'h0;R/W;;;;the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...;
;;;;;;spi_dout1_num;[3:2];2'h0;R/W;;;;the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...;
;;;;;;spi_dout0_num;[1:0];2'h0;R/W;;;;the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...;
0x3FC;SPI_REG_DATE;Clk;reset_n;;;;[31:28];4'h0;RO;;;;reserved;
;;;;;;reg_spi_date;[27:0];32'h1812140;RW;;;;SPI register version.;
