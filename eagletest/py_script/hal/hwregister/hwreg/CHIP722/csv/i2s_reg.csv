 Address ; RegName ; Clk ; Rst ; Port ; Public ; Signal ; BitPos ; Default ; SW(R/W) ; HW(W) ; MCU(W) ; MISC ; Description ;;;
 0x0008 ; I2SCONF ; clk ; reset_n ;;;; [31:30] ; 2'h0 ;RO;;;;;;;
;;;; Not ;; i2s_rx_reset_st; [29]; 1'b0;RO;i2s_rx_reset_clr/1'b0; i2s_rx_reset/1'b1;;;;;
;;;;;; reg_rx_big_endian; [28] ; 1'b0; R/W ;;;;;;;
;;;;;; reg_tx_big_endian; [27]; 1'b0; R/W ;;;;;;;
;;;;;; pre_req_en; [26]; 1'b0; R/W ;;;;set this bit to enable i2s to prepare data earlier;;;
;;;;;; reg_rx_dma_equal; [25]; 1'b0; R/W ;;;;1:data in left channel is equal to data in right channel;;;
;;;;;; reg_tx_dma_equal; [24]; 1'b0; R/W ;;;;1:data in left channel is equal to data in right channel;;;
;;;; Not ;; i2s_tx_reset_st; [23]; 1'b0;RO;i2s_tx_reset_clr/1'b0; i2s_tx_reset/1'b1;;1: i2s_tx_reset is not ok   0: i2s_tx_reset is ok;;;
;;;;;; i2s_rx_fifo_reset_st; [22]; 1'b0;RO;;;;1:i2s_rx_fifo_reset is not ok   0:i2s_rx_fifo reset is ok;;;
;;;;;; i2s_tx_fifo_reset_st; [21]; 1'b0;RO;;;;1:i2s_tx_fifo reset is not ok   0:i2s_tx_fifo_reset is ok;;;
;;;;;; reg_i2s_sig_loopback; [20]; 1'b0; R/W ;;;;Enable signal loopback mode with transmitter module and receiver module sharing the same WS and BCK signals.;;;
;;;;;; reg_rx_LSB_first_DMA ; [19]; 1'b1 ; R/W ;;;;1:the data in DMA/APB transform from low bits;0:the data from DMA/APB transform from high bits;;
;;;;;; reg_tx_LSB_first_DMA ; [18]; 1'b1 ; R/W ;;;;1:the data in DMA/APB transform from low bits;0:the data from DMA/APB transform from high bits;;
;;;;;; reg_rx_MSB_right ; [17]; 1'b0 ; R/W ;;;;Set this bit to place right channel data at the MSB in the receive FIFO.;;;
;;;;;; reg_tx_MSB_right ; [16]; 1'b0 ; R/W ;;;;Set this bit to place right channel data at the MSB in the transmit FIFO.;;;
;;;;;; reg_i2s_rx_mono; [15] ; 1'b0 ;  R/W ;;;;Set this bit to enable receiver  in mono mode;;;
;;;;;; reg_i2s_tx_mono; [14] ; 1'b0 ;  R/W ;;;;Set this bit to enable transmitter in mono mode  ;;;
;;;;;; reg_i2s_rx_short_sync; [13] ; 1'b0 ;  R/W ;;;;Set this bit to enable receiver in PCM standard mode;;;
;;;;;; reg_i2s_tx_short_sync; [12] ; 1'b0 ;  R/W ;;;;Set this bit to enable transmitter in PCM standard mode;;;
;;;;;; reg_rx_MSB_shift; [11]; 1'b0 ; R/W ;;;;Set this bit to enable receiver in Phillips standard mode;;;
;;;;;; reg_tx_MSB_shift; [10]; 1'b0 ; R/W ;;;;Set this bit to enable transmitter in Phillips standard mode;;;
;;;;;; reg_rx_right_first ; [9]; 1'b1 ; R/W ;;;;Set this bit to receive right channel data first;;;
;;;;;; reg_tx_right_first ; [8]; 1'b1 ; R/W ;;;;Set this bit to transmit right channel data first;;;
;;;;;; reg_rx_slave_mod; [7]; 1'b0 ; R/W ;;;;Set this bit to enable slave receiver mode;;;
;;;;;; reg_tx_slave_mod ; [6]; 1'b0 ; R/W ;;;;Set this bit to enable slave transmitter mode  ;;;
;;;;;; i2s_rx_start; [5]; 1'b0 ; R/W ;;;;Set this bit to start receiving data;;;
;;;;;; i2s_tx_start; [4]; 1'b0 ; R/W ;;;;Set this bit to start transmitting data ;;;
;;;;;; i2s_rx_fifo_reset; [3]; 1'b0 ;WO;;;;Set this bit to reset rxFIFO;;;
;;;;;; i2s_tx_fifo_reset; [2] ; 1'b0 ;WO;;;;Set this bit to reset txFIFO;;;
;;;;;; i2s_rx_reset; [1] ; 1'b0 ;WO;;;;Set this bit to reset receiver;;;
;;;;;; i2s_tx_reset; [0] ; 1'b0 ;WO;;;;Set this bit to reset transmitter;;;
 0x000c; I2SINT_RAW; clk; reset_n ;;;; [31:17]; 15'h0 ; RO ;;;INT_RAW;;;;
;;;; Not ;; i2s_out_total_eof_int_raw ; [16] ; 1'b0 ; RO   ; i2s_out_total_eof/1'b1 ; i2s_out_total_eof_int_clr/1'b0 ;;The raw interrupt status bit  for the i2s_out_total_eof_int interrupt;;;
;;;; Not ;; i2s_in_dscr_empty_int_raw ; [15] ; 1'b0 ; RO   ; inlink_dscr_empty/1'b1 ; i2s_in_dscr_empty_int_clr/1'b0 ;;The raw interrupt status bit  for the i2s_in_dscr_empty_int interrupt;;;
;;;; Not ;; i2s_out_dscr_err_int_raw ; [14] ; 1'b0 ; RO   ; outlink_dscr_error/1'b1 ; i2s_out_dscr_err_int_clr/1'b0 ;;The raw interrupt status bit  for the i2s_out_dscr_err_int interrupt;;;
;;;; Not ;; i2s_in_dscr_err_int_raw ; [13] ; 1'b0 ; RO   ; inlink_dscr_error/1'b1 ; i2s_in_dscr_err_int_clr/1'b0 ;;The raw interrupt status bit  for the i2s_in_dscr_err_int interrupt;;;
;;;; Not ;; i2s_out_eof_int_raw ; [12] ; 1'b0 ; RO   ; i2s_out_eof/1'b1 ; i2s_out_eof_int_clr/1'b0 ;;The raw interrupt status bit  for the i2s_out_eof_int interrupt;;;
;;;; Not ;; i2s_out_done_int_raw ; [11] ; 1'b0 ; RO   ; i2s_out_done/1'b1 ; i2s_out_done_int_clr/1'b0 ;;The raw interrupt status bit  for the i2s_out_done_int interrupt;;;
;;;; Not ;N/A; i2s_in_err_eof_int_raw ; [10] ; 1'b0 ; RO   ; i2s_in_err_eof/1'b1 ; i2s_in_err_eof_int_clr/1'b0 ;;don't use;;;
;;;; Not ;; i2s_in_suc_eof_int_raw ; [9] ; 1'b0 ; RO   ; i2s_in_suc_eof/1'b1 ; i2s_in_suc_eof_int_clr/1'b0 ;;The raw interrupt status bit  for the i2s_in_suc_eof_int interrupt;;;
;;;; Not ;; i2s_in_done_int_raw ; [8] ; 1'b0 ; RO   ; i2s_in_done/1'b1 ; i2s_in_done_int_clr/1'b0 ;;The raw interrupt status bit  for the i2s_in_done_int interrupt;;;
;;;; Not ;; i2s_tx_hung_int_raw ; [7] ; 1'b0 ; RO   ; i2s_tx_hung/1'b1 ; i2s_tx_hung_int_clr/1'b0 ;;The raw interrupt status bit  for the i2s_tx_hung_int interrupt;;;
;;;; Not ;; i2s_rx_hung_int_raw ; [6] ; 1'b0 ; RO   ; i2s_rx_hung/1'b1 ; i2s_rx_hung_int_clr/1'b0 ;;The raw interrupt status bit  for the i2s_rx_hung_int interrupt;;;
;;;; Not;; i2s_tx_rempty_int_raw; [5]; 1'b0 ; RO ; rempty_tx/1'b1; i2s_tx_rempty_int_clr/1'b0;;The raw interrupt status bit  for the i2s_tx_rempty_int interrupt;;;
;;;; Not;; i2s_tx_wfull_int_raw; [4]; 1'b0 ; RO ; wfull_tx/1'b1; i2s_tx_wfull_int_clr/1'b0;;The raw interrupt status bit  for the i2s_tx_wfull_int interrupt;;;
;;;; Not;; i2s_rx_rempty_int_raw; [3]; 1'b0 ; RO ; rempty_rx/1'b1; i2s_rx_rempty_int_clr/1'b0;;The raw interrupt status bit  for the i2s_rx_rempty_int interrupt;;;
;;;; Not;; i2s_rx_wfull_int_raw; [2] ; 1'b0 ; RO ; wfull_rx/1'b1; i2s_rx_wfull_int_clr/1'b0;;The raw interrupt status bit  for the i2s_rx_wfull_int interrupt;;;
;;;; Not;; i2s_tx_put_data_int_raw; [1]; 1'b0 ; RO ; put_data_int/1'b1; i2s_put_data_int_clr/1'b0;;The raw interrupt status bit  for the i2s_tx_put_data_int interrupt;;;
;;;; Not;; i2s_rx_take_data_int_raw; [0]; 1'b0 ; RO ; take_data_int/1'b1 ; i2s_take_data_int_clr/1'b0;;The raw interrupt status bit  for the i2s_rx_take_data_int interrupt;;;
0x0010; I2SINT_ST; clk; reset_n ;;;; [31:17]; 15'h0 ; RO ;;;INT_ST;;;;
;;;; Not ;; i2s_out_total_eof_int_st ; [16] ; 1'b0 ; RO   ;;;;The masked interrupt status bit  for the i2s_out_total_eof_int interrupt;;;
;;;; Not ;; i2s_in_dscr_empty_int_st ; [15] ; 1'b0 ; RO   ;;;;The masked interrupt status bit  for the i2s_in_dscr_empty_int interrupt;;;
;;;; Not ;; i2s_out_dscr_err_int_st ; [14] ; 1'b0 ; RO   ;;;;The masked interrupt status bit  for the i2s_out_dscr_err_int interrupt;;;
;;;; Not ;; i2s_in_dscr_err_int_st ; [13] ; 1'b0 ; RO   ;;;;The masked interrupt status bit  for the i2s_in_dscr_err_int interrupt;;;
;;;; Not ;; i2s_out_eof_int_st ; [12] ; 1'b0 ; RO   ;;;;The masked interrupt status bit  for the i2s_out_eof_int interrupt;;;
;;;; Not ;; i2s_out_done_int_st ; [11] ; 1'b0 ; RO   ;;;;The masked interrupt status bit  for the i2s_out_done_int interrupt;;;
;;;; Not ;N/A; i2s_in_err_eof_int_st ; [10] ; 1'b0 ; RO   ;;;;don't use;;;
;;;; Not ;; i2s_in_suc_eof_int_st ; [9] ; 1'b0 ; RO   ;;;;The masked interrupt status bit  for the i2s_in_suc_eof_int interrupt;;;
;;;; Not ;; i2s_in_done_int_st ; [8] ; 1'b0 ; RO   ;;;;The masked interrupt status bit  for the i2s_in_done_int interrupt;;;
;;;; Not ;; i2s_tx_hung_int_st ; [7] ; 1'b0 ; RO   ;;;;The masked interrupt status bit  for the i2s_tx_hung_int interrupt;;;
;;;; Not ;; i2s_rx_hung_int_st ; [6] ; 1'b0 ; RO   ;;;;The masked interrupt status bit  for the i2s_rx_hung_int interrupt;;;
;;;; Not;; i2s_tx_rempty_int_st; [5]; 1'b0 ; RO ;;;;The masked interrupt status bit  for the i2s_tx_rempty_int interrupt;;;
;;;; Not;; i2s_tx_wfull_int_st; [4]; 1'b0 ; RO ;;;;The masked interrupt status bit  for the i2s_tx_wfull_int interrupt;;;
;;;; Not;; i2s_rx_rempty_int_st; [3]; 1'b0 ; RO ;;;;The masked interrupt status bit  for the i2s_rx_rempty_int interrupt;;;
;;;; Not;; i2s_rx_wfull_int_st; [2] ; 1'b0 ; RO ;;;;The masked interrupt status bit  for the i2s_rx_wfull_int interrupt;;;
;;;; Not;; i2s_tx_put_data_int_st; [1]; 1'b0 ; RO ;;;;The masked interrupt status bit  for the i2s_tx_put_data_int interrupt;;;
;;;; Not;; i2s_rx_take_data_int_st; [0]; 1'b0 ; RO ;;;;The masked interrupt status bit  for the i2s_rx_take_data_int interrupt;;;
0x0014; I2SINT_ENA; clk; reset_n ;;;; [31:17]; 15'h0 ; RO ;;;;;;;
;;;; Not ;; i2s_out_total_eof_int_ena; [16] ; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_out_total_eof_int interrupt;;;
;;;; Not ;; i2s_in_dscr_empty_int_ena ; [15] ; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_in_dscr_empty_int interrupt;;;
;;;; Not ;; i2s_out_dscr_err_int_ena ; [14] ; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_out_dscr_err_int interrupt;;;
;;;; Not ;; i2s_in_dscr_err_int_ena ; [13] ; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_in_dscr_err_int interrupt;;;
;;;; Not ;; i2s_out_eof_int_ena ; [12] ; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_out_eof_int interrupt;;;
;;;; Not ;; i2s_out_done_int_ena ; [11] ; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_out_done_int interrupt;;;
;;;; Not ;N/A; i2s_in_err_eof_int_ena ; [10] ; 1'b0 ; R/W ;;;;don't use;;;
;;;; Not ;; i2s_in_suc_eof_int_ena ; [9] ; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_in_suc_eof_int interrupt;;;
;;;; Not ;; i2s_in_done_int_ena ; [8] ; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_in_done_int interrupt;;;
;;;; Not ;; i2s_tx_hung_int_ena ; [7] ; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_tx_hung_int interrupt;;;
;;;; Not ;; i2s_rx_hung_int_ena ; [6] ; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_rx_hung_int interrupt;;;
;;;; Not;; i2s_tx_rempty_int_ena; [5]; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_tx_rempty_int interrupt;;;
;;;; Not;; i2s_tx_wfull_int_ena; [4]; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_tx_wfull_int interrupt;;;
;;;; Not;; i2s_rx_rempty_int_ena; [3]; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_rx_rempty_int interrupt;;;
;;;; Not;; i2s_rx_wfull_int_ena; [2] ; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_rx_wfull_int interrupt;;;
;;;; Not;; i2s_tx_put_data_int_ena; [1]; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_tx_put_data_int interrupt;;;
;;;; Not;; i2s_rx_take_data_int_ena; [0]; 1'b0 ; R/W ;;;;The interrupt enable bit  for the i2s_rx_take_data_int interrupt;;;
0x0018; I2SINT_CLR; clk; reset_n ;;;; [31:17]; 15'h0 ; RO ;;;;;;;
;;;; Not ;; i2s_out_total_eof_int_clr; [16] ; 1'b0 ; WO ;;;;Set this bit to clear the i2s_out_total_eof_int interrupt;;;
;;;; Not ;; i2s_in_dscr_empty_int_clr ; [15] ; 1'b0 ; WO ;;;;Set this bit to clear the i2s_in_dscr_empty_int interrupt;;;
;;;; Not ;; i2s_out_dscr_err_int_clr ; [14] ; 1'b0 ; WO ;;;;Set this bit to clear the i2s_out_dscr_err_int interrupt;;;
;;;; Not ;; i2s_in_dscr_err_int_clr ; [13] ; 1'b0 ; WO ;;;;Set this bit to clear the i2s_in_dscr_err_int interrupt;;;
;;;; Not ;; i2s_out_eof_int_clr ; [12] ; 1'b0 ; WO ;;;;Set this bit to clear the i2s_out_eof_int interrupt;;;
;;;; Not ;; i2s_out_done_int_clr ; [11] ; 1'b0 ; WO ;;;;Set this bit to clear the i2s_out_done_int interrupt;;;
;;;; Not ;N/A; i2s_in_err_eof_int_clr ; [10] ; 1'b0 ; WO ;;;;don't use;;;
;;;; Not ;; i2s_in_suc_eof_int_clr ; [9] ; 1'b0 ; WO ;;;;Set this bit to clear the i2s_in_suc_eof_int interrupt;;;
;;;; Not ;; i2s_in_done_int_clr ; [8] ; 1'b0 ; WO ;;;;Set this bit to clear the i2s_in_done_int interrupt;;;
;;;; Not ;; i2s_tx_hung_int_clr ; [7] ; 1'b0 ; WO ;;;;Set this bit to clear the i2s_tx_hung_int interrupt;;;
;;;; Not ;; i2s_rx_hung_int_clr ; [6] ; 1'b0 ; WO ;;;;Set this bit to clear the i2s_rx_hung_int interrupt;;;
;;;; Not;; i2s_tx_rempty_int_clr; [5]; 1'b0 ; WO;;;;Set this bit to clear the i2s_tx_rempty_int interrupt;;;
;;;; Not;; i2s_tx_wfull_int_clr; [4]; 1'b0 ; WO;;;;Set this bit to clear the i2s_tx_wfull_int interrupt;;;
;;;; Not;; i2s_rx_rempty_int_clr; [3]; 1'b0 ; WO;;;;Set this bit to clear the i2s_rx_rempty_int interrupt;;;
;;;; Not;; i2s_rx_wfull_int_clr; [2] ; 1'b0 ; WO;;;;Set this bit to clear the i2s_rx_wfull_int interrupt;;;
;;;; Not;; i2s_put_data_int_clr; [1]; 1'b0 ; WO;;;;Set this bit to clear the i2s_tx_put_data_int interrupt;;;
;;;; Not;; i2s_take_data_int_clr; [0]; 1'b0 ; WO;;;;Set this bit to clear the i2s_rx_take_data_int interrupt;;;
0x001c; I2STIMING ; clk; reset_n;;;; [31:25]; 7'b0; RO;;;;;;;
;;;;;; reg_tx_bck_in_inv ; [24]; 1'b0 ; R/W ;;;;Set this bit to invert BCK signal input to the slave transmitter;;;
;;;;;; reg_data_enable_delay; [23:22]; 2'b0; R/W;;;;Number of delay cycles for data valid flag.;;;
;;;;;; reg_rx_dsync_sw; [21]; 1'b0 ; R/W ;;;;Set this bit to synchronize signals with the double sync method into the receiver;;;
;;;;;; reg_tx_dsync_sw; [20]; 1'b0 ; R/W ;;;;Set this bit to synchronize signals with the double sync method into the transmitter;;;
;;;;;; reg_rx_bck_out_delay; [19:18]; 2'b0; R/W ;;;;Number of delay cycles for BCK out of the receiver;;;
;;;;;; reg_rx_ws_out_delay; [17:16]; 2'b0; R/W ;;;;Number of delay cycles for WS out of the receiver;;;
;;;;;; reg_tx_sd_out_delay; [15:14]; 2'b0; R/W ;;;;Number of delay cycles for SD out of the transmitter;;;
;;;;;; reg_tx_ws_out_delay; [13:12]; 2'b0; R/W ;;;;Number of delay cycles for WS out of the transmitter;;;
;;;;;; reg_tx_bck_out_delay; [11:10]; 2'b0; R/W ;;;;Number of delay cycles for BCK out of the transmitter;;;
;;;;;; reg_rx_sd_in_delay; [9:8]; 2'b0; R/W ;;;;Number of delay cycles for SD into the receiver;;;
;;;;;; reg_rx_ws_in_delay; [7:6]; 2'b0; R/W ;;;;Number of delay cycles for WS into the receiver;;;
;;;;;; reg_rx_bck_in_delay; [5:4]; 2'b0; R/W ;;;;Number of delay cycles for BCK into the receiver;;;
;;;;;; reg_tx_ws_in_delay; [3:2]; 2'b0; R/W ;;;;Number of delay cycles for WS into the transmitter;;;
;;;;;; reg_tx_bck_in_delay; [1:0]; 2'b0; R/W ;;;;Number of delay cycles for BCK into the transmitter;;;
0x0020; I2S_FIFO_CONF; clk; reset_n;;;; [31:24]; 8'h0; RO;;;;;;;
;;;;;; reg_i2s_tx_24msb_en; [23]; 1'b0; R/W ;;;;Only useful in tx 24bit mode. 1: the high 24 bits are effective in i2s fifo   0: the low 24 bits are effective in i2s fifo;;;
;;;;;; reg_i2s_rx_24msb_en; [22]; 1'b0; R/W ;;;;Only useful in rx 24bit mode. 1: the high 24 bits are effective in i2s fifo   0: the low 24 bits are effective in i2s fifo;;;
;;;;;; reg_i2s_rx_fifo_sync; [21]; 1'b0 ; R/W ;;;;force write back rx data to memory;;;
;;;;;; reg_i2s_rx_fifo_mod_force_en; [20]; 1'b0 ; R/W ;;;;The bit should always be set to 1;;;
;;;;;; reg_i2s_tx_fifo_mod_force_en; [19]; 1'b0 ; R/W ;;;;The bit should always be set to 1;;;
;;;;;; reg_i2s_rx_fifo_mod; [18:16]; 3'b0 ; R/W ;;;;Receiver FIFO mode configuration bits;;;
;;;;;; reg_i2s_tx_fifo_mod; [15:13]; 3'b0; R/W ;;;;Transmitter FIFO mode configuration bits;;;
;;;;;; reg_i2s_dscr_en; [12]; 1'd1 ; R/W ;;;;Set this bit to enable I2S DMA mode;;;
;;;;;; reg_i2s_tx_data_num; [11:6]; 6'd32 ; R/W ;;;;Threshold of data length in transmitter FIFO;;;
;;;;;; reg_i2s_rx_data_num; [5:0]; 6'd32 ; R/W ;;;;Threshold of data length in receiver FIFO;;;
0x0024; I2SRXEOF_NUM; clk; reset_n ;;; reg_i2s_rx_eof_num ; [31:0]; 32'd64; R/W ;;;;the length of data to be received. It will trigger i2s_in_suc_eof_int.;;;
0x0028; I2SCONF_SIGLE_DATA; clk; reset_n;;; reg_i2s_sigle_data; [31:0]; 32'd0; R/W ;;;;the right channel or left channel put out constant value stored in this register according to tx_chan_mod and reg_tx_msb_right;;;
0x002c; I2SCONF_CHAN ; clk ; reset_n;;;; [31:5]; 27'h0 ; RO ;;;;;;;
;;;;;; reg_rx_chan_mod ; [4:3]; 2'b0; R/W ;;;;I2S receiver channel mode configuration bits.;;;
;;;;;; reg_tx_chan_mod; [2:0]; 3'b0 ; R/W ;;;;I2S transmitter channel mode configuration bits.;;;
 0x0030 ;I2SOUT_LINK ; clk ; reset_n ;;N/A; outlink_park ; [31] ; 1'h0 ; RO   ;;;;;;;
;;;;;; i2s_outlink_restart ; [30] ; 1'b0 ; R/W ; i2s_outlink_restart_clr/1'b0 ;;;Set this bit to restart outlink descriptor;;;
;;;;;; i2s_outlink_start   ; [29] ; 1'b0 ; R/W ; i2s_outlink_start_clr/1'b0 ;;;Set this bit to start outlink descriptor;;;
;;;;;; i2s_outlink_stop   ; [28] ; 1'b0 ; R/W ; i2s_outlink_stop_clr/1'b0 ;;;Set this bit to stop outlink descriptor;;;
;;;;;;; [27:20] ; 8'b0 ; RO   ;;;;;;;
;;;;;; i2s_outlink_addr ; [19:0] ; 20'h0 ; R/W ;;;;The address of first outlink descriptor;;;
 0x0034 ; I2SIN_LINK ; clk ; reset_n ;;N/A; inlink_park ; [31] ; 1'h0 ; RO   ;;;;;;;
;;;;;; i2s_inlink_restart ; [30] ; 1'b0 ; R/W ; i2s_inlink_restart_clr/1'b0 ;;;Set this bit to restart inlink descriptor;;;
;;;;;; i2s_inlink_start   ; [29] ; 1'b0 ; R/W ; i2s_inlink_start_clr/1'b0 ;;;Set this bit to start inlink descriptor;;;
;;;;;; i2s_inlink_stop   ; [28] ; 1'b0 ; R/W ; i2s_inlink_stop_clr/1'b0 ;;;Set this bit to stop inlink descriptor;;;
;;;;;;; [27:20] ; 8'b0 ; RO   ;;;;;;;
;;;;;; i2s_inlink_addr ; [19:0] ; 20'h0 ; R/W ;;;;The address of first inlink descriptor;;;
 0x0038; I2S_OUT_EOF_DES_ADDR ; clk ; reset_n ;;; i2s_out_eof_des_addr ; [31:0] ; 32'h0 ; RO   ;;;;The address of outlink descriptor that produces EOF;;;
 0x003c; I2S_IN_EOF_DES_ADDR ; clk ; reset_n ;;; i2s_in_suc_eof_des_addr ; [31:0] ; 32'h0 ; RO   ;;;;The address of inlink descriptor that produces EOF;;;
 0x0040; I2S_OUT_EOF_BFR_DES_ADDR ; clk ; reset_n ;;; i2s_out_eof_bfr_des_addr ; [31:0] ; 32'h0 ; RO   ;;;;The address of buffer relative to the outlink descriptor that produces EOF;;;
 0x0044; I2S_AHB_TEST ; clk ; reset_n ;;;; [31:6] ; 26'b0 ; RO   ;;;;;;;
;;;;;N/A; i2s_ahb_testaddr ; [5:4] ; 2'b0 ; R/W ;;;;;;;
;;;;;;; [3] ; 1'b0 ; RO   ;;;;;;;
;;;;;N/A; i2s_ahb_testmode ; [2:0] ; 3'b0 ; R/W ;;;;;;;
 0x0048; I2S_INLINK_DSCR ; clk ; reset_n ;;; i2s_inlink_dscr ; [31:0] ; 32'b0 ; RO   ;;;;The address of current inlink descriptor;;;
 0x004C; I2S_INLINK_DSCR_BF0 ; clk ; reset_n ;;; i2s_inlink_dscr_bf0 ; [31:0] ; 32'b0 ; RO   ;;;;The address of next inlink descriptor;;;
 0x0050; I2S_INLINK_DSCR_BF1 ; clk ; reset_n ;;; i2s_inlink_dscr_bf1 ; [31:0] ; 32'b0 ; RO   ;;;;The address of next inlink data buffer;;;
 0x0054; I2S_OUTLINK_DSCR ; clk ; reset_n ;;; i2s_outlink_dscr ; [31:0] ; 32'b0 ; RO   ;;;;The address of current outlink descriptor;;;
 0x0058; I2S_OUTLINK_DSCR_BF0 ; clk ; reset_n ;;; i2s_outlink_dscr_bf0 ; [31:0] ; 32'b0 ; RO   ;;;;The address of next outlink descriptor;;;
 0x005C; I2S_OUTLINK_DSCR_BF1 ; clk ; reset_n ;;; i2s_outlink_dscr_bf1 ; [31:0] ; 32'b0 ; RO   ;;;;The address of next outlink data buffer;;;
 0x0060; I2S_LC_CONF; clk ; reset_n ;;;; [31:14] ; 18'h0 ; RO   ;;;;;;;
;;;;;; i2s_mem_trans_en; [13]; 1'b0 ; R/W ;;;;don't use;;;
;;;;;; i2s_check_owner; [12]; 1'b0 ; R/W ;;;;Set this bit to enable check owner bit by hardware;;;
;;;;;; i2s_out_data_burst_en; [11]; 1'b0 ; R/W ;;;;Transmitter data transfer mode configuration bit. 1:  to prepare out data with burst mode      0: to prepare out data with byte mode;;;
;;;;;; i2s_indscr_burst_en; [10]; 1'b0 ; R/W ;;;;DMA inlink descriptor transfer mode configuration bit. 1:  to prepare inlink descriptor with burst mode    0: to prepare inlink descriptor with byte mode;;;
;;;;;; i2s_outdscr_burst_en; [9]; 1'b0 ; R/W ;;;;DMA outlink descriptor transfer mode configuration bit. 1:  to prepare outlink descriptor with burst mode    0: to prepare outlink descriptor with byte mode;;;
;;;;;; i2s_out_eof_mode; [8]; 1'b1 ; R/W ;;;;DMA out EOF flag generation mode . 1: when dma has popped all data from the FIFO  0:when ahb has pushed all data to the FIFO;;;
;;;;;N/A; i2s_out_no_restart_clr ; [7] ; 1'b0 ; R/W ;;;;don't use;;;
;;;;;; i2s_out_auto_wrback ; [6] ; 1'b0 ; R/W ;;;;Set this bit to enable outlink-written-back automatically when out buffer is transmitted done.;;;
;;;;;; i2s_in_loop_test ; [5] ; 1'b0 ; R/W ;;;;Set this bit to loop test outlink;;;
;;;;;; i2s_out_loop_test ; [4] ; 1'b0 ; R/W ;;;;Set this bit to loop test inlink;;;
;;;;;; i2s_ahbm_rst ; [3] ; 1'b0 ; R/W ;;;;Set this bit to reset ahb interface of DMA;;;
;;;;;; i2s_ahbm_fifo_rst ; [2] ; 1'b0 ; R/W ;;;;Set this bit to reset ahb interface cmdFIFO of DMA;;;
;;;;;; i2s_out_rst ; [1] ; 1'b0 ; R/W ;;;;Set this bit to reset out dma FSM;;;
;;;;;; i2s_in_rst ; [0] ; 1'h0 ; R/W ;;;;Set this bit to reset in dma FSM;;;
 0x0064; I2S_OUTFIFO_PUSH ; clk ; reset_n ;;;; [31:17] ; 15'h0 ; RO   ;;;;;;;
;;;;;; i2s_outfifo_push ; [16] ; 1'h0 ; R/W ; i2s_outfifo_push_clr/1'b0 ;;;;;;
;;;;;;; [15:9] ; 7'h0 ; RO   ;;;;;;;
;;;;;; i2s_outfifo_wdata ; [8:0] ; 9'h0 ; R/W ;;;;;;;
 0x0068; I2S_INFIFO_POP ; clk ; reset_n ;;;; [31:17] ; 15'h0 ; RO   ;;;;;;;
;;;;;; i2s_infifo_pop ; [16] ; 1'h0 ; R/W ; i2s_infifo_pop_clr/1'b0 ;;;;;;
;;;;;;; [15:12] ; 4'h0 ; RO   ;;;;;;;
;;;;;; i2s_infifo_rdata ; [11:0] ; 12'h0 ; RO   ;;;;;;;
 0x006C ; I2S_LC_STATE0 ; clk ; reset_n ;;;out_empty; [31] ; 1'h0 ; RO   ;;;;DMA transmitter status register;;;
;;;;;;out_full; [30] ; 1'b0; RO   ;;;;;;;
;;;;;;outfifo_cnt; [29:23]; 7'b0; RO   ;;;;;;;
;;;;;;out_state; [22:20]; 3'b0; RO   ;;;;;;;
;;;;;;out_dscr_state; [19:18]; 2'b0; RO   ;;;;;;;
;;;;;;outlink_dscr_addr; [17:0]; 18'h0 ; RO   ;;;;;;;
 0x0070 ; I2S_LC_STATE1 ; clk ; reset_n ;;;in_empty; [31] ; 1'h0 ; RO   ;;;;DMA receiver status register;;;
;;;;;;in_full; [30] ; 1'b0; RO   ;;;;;;;
;;;;;;infifo_cnt_debug; [29:23]; 7'b0; RO   ;;;;;;;
;;;;;;in_state; [22:20]; 3'b0; RO   ;;;;;;;
;;;;;;in_dscr_state; [19:18]; 2'b0; RO   ;;;;;;;
;;;;;;inlink_dscr_addr; [17:0]; 18'h0 ; RO   ;;;;;;;
 0x0074; I2S_LC_HUNG_CONF; clk ; reset_n ;;;; [31:12] ; 20'h0 ; RO   ;;;;;;;
;;;;;; i2s_lc_fifo_timeout_ena; [11]; 1'b1 ; R/W ;;;;The enable bit for FIFO timeout;;;
;;;;;; i2s_lc_fifo_timeout_shift; [10:8] ; 3'b0 ; R/W ;;;;The bits are used to scale tick counter threshold. The tick counter is reset when counter value >= 88000/2^i2s_lc_fifo_timeout_shift;;;
;;;;;; i2s_lc_fifo_timeout; [7:0]; 8'h10; R/W ;;;;the i2s_tx_hung_int interrupt or the i2s_rx_hung_int interrupt will be triggered when fifo hung counter is equal to this value  ;;;
 0x0080 ; I2S_CVSD_CONF0 ; clk ; reset_n ;;N/A; i2s_cvsd_reg_y_min ; [31:16] ; 16'h8000 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_cvsd_reg_y_max ; [15:0] ; 16'h7fff ; R/W ;;;;don't use;;;
 0x0084 ; I2S_CVSD_CONF1 ; clk ; reset_n ;;N/A; i2s_cvsd_reg_sigma_min ; [31:16] ; 16'd10 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_cvsd_reg_sigma_max ; [15:0] ; 16'd1280 ; R/W ;;;;don't use;;;
 0x0088 ; I2S_CVSD_CONF2 ; clk ; reset_n ;;;; [31:19] ; 13'h0 ; RO ;;;;don't use;;;
;;;;;N/A; i2s_cvsd_reg_h ; [18:16] ; 3'd5 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_cvsd_reg_beta ; [15:6] ; 10'd10 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_cvsd_reg_J ; [5:3] ; 3'h4 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_cvsd_reg_K ; [2:0] ; 3'h4 ; R/W ;;;;don't use;;;
 0x008C ; I2S_PLC_CONF0 ; clk ; reset_n ;;;; [31:28] ; 4'h0 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_N_min_err ; [27:25] ; 3'd4 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_pack_len_8k ; [24:20] ; 5'd10 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_max_slide_sample ; [19:12] ; 8'd128 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_shift_rate ; [11:9] ; 3'h1 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_N_err_seg ; [8:6] ; 3'h4 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_good_pack_max ; [5:0] ; 6'h39 ; R/W ;;;;don't use;;;
 0x0090 ; I2S_PLC_CONF1 ; clk ; reset_n ;;N/A; i2s_slide_win_len ; [31:24] ; 8'd160 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_bad_ola_win2_para ; [23:16] ; 8'd23 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_bad_ola_win2_para_shift ; [15:12] ; 4'd8 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_bad_cef_atten_para_shift ; [11:8] ; 4'd10 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_bad_cef_atten_para ; [7:0] ; 8'd5 ; R/W ;;;;don't use;;;
 0x0094 ; I2S_PLC_CONF2 ; clk ; reset_n ;;;; [31:7] ; 25'h0 ; RO ;;;;don't use;;;
;;;;;N/A; i2s_reg_min_period ; [6:2] ; 5'd10 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_reg_cvsd_seg_mod ; [1:0] ; 2'd0 ; R/W ;;;;don't use;;;
 0x0098 ; I2S_ESCO_CONF0 ; clk ; reset_n ;;;; [31:13] ; 19'h0 ; RO ;;;;don't use;;;
;;;;;N/A; i2s_plc2dma_en ; [12] ; 1'b0 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_plc_en ; [11] ; 1'b0 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_cvsd_dec_reset ; [10] ; 1'b0 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_cvsd_dec_start ; [9] ; 1'b0 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_esco_cvsd_inf_en ; [8] ; 1'b0 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_esco_cvsd_pack_len_8k ; [7:3] ; 5'b0 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_esco_cvsd_dec_pack_err ; [2] ; 1'b0 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_esco_chan_mod ; [1] ; 1'd0 ; R/W ;;;;don't use;;;
;;;;;N/A; i2s_esco_en ; [0] ; 1'd0 ; R/W ;;;;don't use;;;
 0x009c ; I2S_SCO_CONF0 ; clk ; reset_n ;;;; [31:4] ; 28'h0 ; RO ;;;;don't use;;;
;;;;;N/A; i2s_cvsd_enc_reset ; [3] ; 1'd0 ;  R/W ;;;;don't use;;;
;;;;;N/A; i2s_cvsd_enc_start ; [2] ; 1'd0 ;  R/W ;;;;don't use;;;
;;;;;N/A; reg_i2s_sco_no_i2s_en ; [1] ; 1'd0 ; R/W ;;;;don't use;;;
;;;;;N/A; reg_i2s_sco_with_i2s_en ; [0] ; 1'd0 ; R/W ;;;;don't use;;;
 0x00a0 ; I2SCONF1 ; clk ; reset_n ;;;; [31:10] ; 22'h0 ; R/W ;;;;;;;
;;;;;N/A; reg_i2s_tx_zeros_rm_en; [9] ; 1'd0 ;  R/W ;;;;don't use;;;
;;;;;; reg_i2s_tx_stop_en; [8] ; 1'd0 ;  R/W ;;;;Set this bit to stop disable output BCK signal and WS signal when tx FIFO is emtpy;;;
;;;;;; rx_pcm_bypass; [7]; 1'h1 ; R/W ;;;;Set this bit to bypass Compress/Decompress module for received data.;;;
;;;;;; rx_pcm_conf; [6:4]; 3'h0 ;  R/W ;;;;Compress/Decompress module configuration bits. 0: decompress received data  1:compress received data ;;;
;;;;;; tx_pcm_bypass; [3]; 1'h1 ; R/W ;;;;Set this bit to bypass  Compress/Decompress module for transmitted data.;;;
;;;;;; tx_pcm_conf; [2:0]; 3'h1 ;  R/W ;;;;Compress/Decompress module configuration bits. 0: decompress transmitted data  1:compress transmitted data ;;;
 0x00a4 ; I2S_PD_CONF ; clk ; reset_n ;;;; [31:4] ; 28'h0 ; RO ;;;;;;;
;;;;;; reg_plc_mem_force_pu; [3] ; 1'h1 ; R/W ;;;;;;;
;;;;;; reg_plc_mem_force_pd; [2] ; 1'h0; R/W ;;;;;;;
;;;;;; reg_i2s_fifo_force_pu; [1] ; 1'h1 ; R/W ;;;;Force FIFO power-up;;;
;;;;;; reg_i2s_fifo_force_pd; [0] ; 1'h0; R/W ;;;;Force FIFO power-down;;;
 0x00a8 ; I2SCONF2 ; clk ; reset_n ;;;; [31:14] ; 18'h0 ; RO ;;;;;;;
;;;;;; reg_i2si_v_sync_filter_thres; [13:11]; 3'b0; R/W ;;;;;;;
;;;;;; reg_i2si_v_sync_filter_en; [10]; 1'b0; R/W ;;;;;;;
;;;;;; reg_cam_clk_loopback; [9]; 1'b0 ; R/W ;;;;Set this bit to loopback cam_clk from i2s_rx;;;
;;;;;; reg_cam_sync_fifo_reset; [8]; 1'b0 ; R/W ;;;;Set this bit to reset cam_sync_fifo;;;
;;;;;; reg_inter_valid_en ; [7]; 1'b0 ; R/W ;;;;Set this bit to enable camera internal valid; ;;
;;;;;; reg_ext_adc_start_en ; [6]; 1'b0 ; R/W ;;;;Set this bit to enable the function that ADC mode is triggered by external signal.; ;;
;;;;;; reg_lcd_en; [5]; 1'b0 ; R/W ;;;;Set this bit to enable LCD mode;;;
;;;;;N/A; reg_data_enable; [4] ; 1'h0; R/W ;;;;for debug camera mode enable;;;
;;;;;N/A; reg_data_enable_test_en; [3] ; 1'h0; R/W ;;;;for debug camera mode enable;;;
;;;;;; reg_lcd_tx_sdx2_en; [2] ; 1'h0; R/W ;;;;Set this bit to duplicate data pairs (Frame Form 2) in LCD mode.;;;
;;;;;; reg_lcd_tx_wrx2_en; [1] ; 1'h0; R/W ;;;;LCD WR double for one datum.;;;
;;;;;; reg_camera_en; [0] ; 1'h0; R/W ;;;;Set this bit to enable camera mode;;;
 0x00ac ; I2S_CLKM_CONF; clk ; reset_n ;;;; [31:23] ; 9'h0 ; RO ;;;;;;;
;;;;;; reg_clk_sel; [22:21]; 2'b0 ; R/W ;;;;Set this bit to enable clk_apll;  ;;
;;;; Not;; reg_clk_en; [20]; 1'b0; R/W ;;;;Set this bit to enable clk gate;;;
;;;;;; reg_clkm_div_a; [19:14] ; 6'h0 ; R/W ;;;;Fractional clock divider denominator value;;;
;;;;;; reg_clkm_div_b; [13:8] ; 6'h0; R/W ;;;;Fractional clock divider numerator value;;;
;;;;;; reg_clkm_div_num; [7:0]; 8'd4; R/W ;;;;Integral I2S clock divider value;;;
 0x00b0 ; I2S_SAMPLE_RATE_CONF; clk ; reset_n ;;;; [31:24] ;  8'h0 ; RO ;;;;;;;
;;;;;; reg_rx_bits_mod; [23:18]; 6'd16 ; R/W ;;;;Set the bits to configure bit length of I2S receiver channel.;;;
;;;;;; reg_tx_bits_mod; [17:12]; 6'd16 ; R/W ;;;;Set the bits to configure bit length of I2S transmitter channel.;;;
;;;;;; reg_rx_bck_div_num; [11:6]; 6'd6; R/W ;;;;Bit clock configuration bits in receiver mode. ;;;
;;;;;; reg_tx_bck_div_num; [5:0]; 6'd6; R/W ;;;;Bit clock configuration bits in transmitter mode. ;;;
 0x00b4 ;I2S_PDM_CONF ; clk ; reset_n ;;; reg_rx_pdm_way_mode; [31:30]; 2'h0 ; R/W;;;;0/1 pdm rx use one-way; 2/3 pdm rx use two-way;;
;;;;;; reg_tx_pdm_way_mode; [29:28]; 2'b0; R/W;;;;0/1 pdm rx use one-way; 2/3 pdm tx use two-way;;
;;;;;; reg_tx_pdm_chan_mod; [27:26]; 2'h0; R/W;;;;pdm tx channel mode;0/3: standard mode; 1: right channel output; 2: left channel output 
;;;;;; reg_tx_pdm_hp_bypass; [25]; 1'h0 ; R/W ;;;;Set this bit to enable tx pdm hp filter bypass;;;
;;;;;; reg_rx_pdm_sinc_dsr_16_en; [24]; 1'h1; R/W ;;;;PDM down-sampling rate for filter group1 in receiver mode. 0: downsample rate = 64  1:downsample rate = 128;;;
;;;;;; reg_tx_pdm_sigmadelta_in_shift; [23:22]; 2'h1; R/W ;;;;Adjust size of input signal to filter module. 0: divided by 2  1:multiplied by 1  2:multiplied by 2  3:multiplied by 4;;;
;;;;;; reg_tx_pdm_sinc_in_shift; [21:20]; 2'h1; R/W ;;;;Adjust size of input signal to filter module. 0: divided by 2  1:multiplied by 1  2:multiplied by 2  3:multiplied by 4;;;
;;;;;; reg_tx_pdm_lp_in_shift; [19:18]; 2'h1; R/W ;;;;Adjust size of input signal to filter module. 0: divided by 2  1:multiplied by 1  2:multiplied by 2  3:multiplied by 4;;;
;;;;;; reg_tx_pdm_hp_in_shift; [17:16]; 2'h1; R/W ;;;;Adjust size of input signal to filter module. 0: divided by 2  1:multiplied by 1  2:multiplied by 2  3:multiplied by 4;;;
;;;;;N/A; reg_tx_pdm_prescale; [15:8]; 8'h0; R/W ;;;;set to 0;;;
;;;;;; reg_tx_pdm_sinc_osr2; [7:4]; 4'h2; R/W ;;;;upsample rate = 64 * reg_tx_pdm_sinc_osr2;;;
;;;;;; reg_pdm2pcm_conv_en; [3]; 1'h0; R/W ;;;;Set this bit to enable PDM-to-PCM converter;;;
;;;;;; reg_pcm2pdm_conv_en; [2]; 1'h0; R/W ;;;;Set this bit to enable PCM-to-PDM converter;;;
;;;;;; reg_rx_pdm_en; [1]; 1'h0; R/W ;;;;Set this bit to enable receiver PDM mode;;;
;;;;;; reg_tx_pdm_en; [0]; 1'h0; R/W ;;;;Set this bit to enable transmitter PDM mode;;;
 0x00b8 ;I2S_PDM_FREQ_CONF ; clk ; reset_n ;;;; [31:20]; 12'h0 ; RO ;;;;;;;
;;;;;; reg_tx_pdm_fp; [19:10]; 10'd960; R/W ;;;;PCM-to-PDM converter PDM frequency parameter;;;
;;;;;; reg_tx_pdm_fs; [9:0]; 10'd480; R/W ;;;;PCM-to-PDM converter PCM frequency parameter;;;
 0x00bc ;I2S_STATE ;  clk ;reset_n ;;;; [31:1]; 31'h0 ; RO ;;;;;;;
;;;;;; reg_i2s_tx_idle; [0] ;  1'b1; RO ;;;;1: i2s_tx is idle state;;;
 0x00fc ; I2S_DATE ; clk ; reset_n ; Not;; reg_i2sdate; [31:0] ; 32'h18092900; R/W ;;;;;;;
